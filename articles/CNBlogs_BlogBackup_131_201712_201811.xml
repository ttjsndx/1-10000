<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/"><channel><title>博客园-有营养的yyl</title><link>https://www.cnblogs.com/ttjsndx/</link><description /><language>zh-cn</language><lastBuildDate>Mon, 19 Nov 2018 12:46:14 GMT</lastBuildDate><pubDate>Mon, 19 Nov 2018 12:46:14 GMT</pubDate><ttl>60</ttl><item><title>mongo中的游标与数据一致性的取舍</title><link>http://www.cnblogs.com/ttjsndx/archive/2018/11/14/9947911.html</link><dc:creator>有营养的yyl</dc:creator><author>有营养的yyl</author><pubDate>Wed, 14 Nov 2018 13:25:00 GMT</pubDate><guid>http://www.cnblogs.com/ttjsndx/archive/2018/11/14/9947911.html</guid><description><![CDATA[<p>除了特殊注释外，本文的测试结果均基于<em><strong>&nbsp;spring-data-mongodb:1.10.6.RELEASE(</strong><strong>spring-boot-starter:1.5.6.RELEASE</strong><strong>)，MongoDB 3.0.6</strong></em></p>
<hr />
<p>　　我们在学习了一门编程语言时，一定要明白语句底层的意义，比如 User user= new User(); 它在堆中开辟了一个空间用于存放User()，并且在栈中新增了一个指向这个堆空间的指针user。那么，mongo shell中的 var user = db.user.find(); 到底做了什么？也是为集合user开辟了一个堆空间，然后再让user指向这个空间吗？</p>
<p>&nbsp;　　让我们先来做个实验</p>
<div class="cnblogs_code">
<pre>&gt; <span style="color: #0000ff;">function</span><span style="color: #000000;"> testTime(){
... var date1 </span>=<span style="color: #000000;"> new Date().getTime();
... </span><span style="color: #0000ff;">for</span>(var i = <span style="color: #800080;">0</span>; i &lt; <span style="color: #800080;">10000</span>; i++<span style="color: #000000;">){
... var user </span>= db.user.<span style="color: #0000ff;">find</span><span style="color: #000000;">();
... }
... return new Date().getTime() </span>-<span style="color: #000000;"> date1;
... }
</span>&gt;<span style="color: #000000;"> testTime();
</span><span style="color: #800080;">165</span></pre>
</div>
<p>　　user表中是又100w条数据的，100万条数据的空间创建10000次，只用了165ms?</p>
<p>　　显然是不现实的，我们再看一下</p>
<div class="cnblogs_code">
<pre>&gt; <span style="color: #0000ff;">function</span><span style="color: #000000;"> testTime(){ 
    var date1 </span>=<span style="color: #000000;"> new Date().getTime();
    </span><span style="color: #0000ff;">for</span>(var i = <span style="color: #800080;">0</span>; i &lt; <span style="color: #800080;">100</span>; i++<span style="color: #000000;">){ 
        var user </span>=<span style="color: #000000;"> db.user.aggregate(); 
    }
    return new Date().getTime() </span>-<span style="color: #000000;"> date1; 
}
</span>&gt;<span style="color: #000000;"> testTime();
</span><span style="color: #800080;">2800</span>    </pre>
</div>
<p>　　这里我们将find方法替换成了aggregate，并且将10000次循环改成了100次，然后时间却上升了到2800ms。通过第二章我们知道aggregate的底层是findOne，让我们再回头仔细看看findOne和find的代码区别</p>
<div class="cnblogs_code">
<pre>&gt;<span style="color: #000000;"> db.user.find
</span><span style="color: #0000ff;">function</span><span style="color: #000000;"> ( query , fields , limit , skip, batchSize, options ){
    </span><span style="color: #0000ff;">var</span> cursor = <span style="color: #0000ff;">new</span> DBQuery( <span style="color: #0000ff;">this</span>._mongo , <span style="color: #0000ff;">this</span>._db , <span style="color: #0000ff;">this</span><span style="color: #000000;"> ,
                        </span><span style="color: #0000ff;">this</span>._fullName , <span style="color: #0000ff;">this</span><span style="color: #000000;">._massageObject( query ) , fields ,
 limit , skip , batchSize , options </span>|| <span style="color: #0000ff;">this</span><span style="color: #000000;">.getQueryOptions() );

    </span><span style="color: #0000ff;">var</span> connObj = <span style="color: #0000ff;">this</span><span style="color: #000000;">.getMongo();
    </span><span style="color: #0000ff;">var</span> readPrefMode =<span style="color: #000000;"> connObj.getReadPrefMode();
    </span><span style="color: #0000ff;">if</span> (readPrefMode != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
        cursor.readPref(readPrefMode, connObj.getReadPrefTagSet());
    }

    </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> cursor;  //find方法返回的是一个游标
}
</span>&gt;<span style="color: #000000;"> db.user.findOne
</span><span style="color: #0000ff;">function</span><span style="color: #000000;"> ( query , fields, options ){
    </span><span style="color: #0000ff;">var</span> cursor = <span style="color: #0000ff;">this</span>.find(query, fields, -1 <span style="color: #008000;">/*</span><span style="color: #008000;"> limit </span><span style="color: #008000;">*/</span>, 0 <span style="color: #008000;">/*</span><span style="color: #008000;"> skip</span><span style="color: #008000;">*/</span><span style="color: #000000;">,
        </span>0 <span style="color: #008000;">/*</span><span style="color: #008000;"> batchSize </span><span style="color: #008000;">*/</span><span style="color: #000000;">, options);

    </span><span style="color: #0000ff;">if</span> ( !<span style="color: #000000;"> cursor.hasNext() )
        </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;
    </span><span style="color: #0000ff;">var</span> ret =<span style="color: #000000;"> cursor.next();
    </span><span style="color: #0000ff;">if</span> ( cursor.hasNext() ) <span style="color: #0000ff;">throw</span> Error( "findOne has more than 1 result!"<span style="color: #000000;"> );
    </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> ( ret.$err )
        </span><span style="color: #0000ff;">throw</span> Error( "error " +<span style="color: #000000;"> tojson( ret ) );
    </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> ret;   //findOne返回的是具体的数据
}</span></pre>
</div>
<p>　　另外，spring-data-mongodb中的其实也有这么一对相对的方法</p>
<p><img src="https://img2018.cnblogs.com/blog/1291030/201811/1291030-20181114203335641-1107789830.png" alt="" /></p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1291030/201811/1291030-20181114203351900-1871693958.png" alt="" /></p>
<p>　　平均90%的CPU占有率跑了70分钟，说明&nbsp;&nbsp;<span class="cnblogs_code">mongoTemplate.getCollection("user").find(<span style="color: #0000ff;">new</span> BasicDBObject())</span>&nbsp;其实也没有直接请求全部的数据，而是返回了一个类似于指针的游标。不过我看&nbsp;&nbsp;spring-data-mongodb：2.1.2RELEASE中已经去除掉这个方法了。可能是因为这个方法对于查询数据的实时性太差了吧。</p>
<p>　　上面的各种测试结果也表明了返回cursor的好处，当然他也不可能是完美的。因为文档在变大时，可能因为空间位置不足，而移动到集合到末尾，这样这个位置变动的文档就可能会被读取到两次，造成数据的误差，这可能就是新版本的spring-data-mongodb去掉了直接获取游标的方法的原因吧。</p>
<p>　　在mongo shell中甚至提供了专门的快照功能，用于避免游标可能造成的数据重复问题，使用方式：db._collection_.find().snapshot();</p>
<p>　　因为游标是为了避免一次去除过多数据造成性能的浪费，所以他对一些情况是不适用的。比如</p>
<p>　　(1) findOne，只取一条数据，那么也就不需要返回游标了</p>
<p>　　(2) 数据库操作命令，用户只关注的是操作成功或失败</p>
<p>　　(3) 分组函数，这些函数需要遍历完所有的数据，才能得出最后的结果</p>
<p>　　因此，边有了最开始的runCommand调用了findOne方法，而为了与一般的数据查询的区分，mongo就提供了一个特殊集合$cmd用于执行（2）、（3）情况的函数。这个$cmd集合无法插入数据，无法直接查询数据，使用db.getCollectionNames();时也不会展示，只有使用相应的操作符的时候，可以进行相应的查询。</p>
<p>　　在新版本中，$cmd藏的更深了，我一直纠结的鸡生蛋蛋生鸡的情况也不见了，我上面总结的一些情况也过时了。技术就是这样，总是在不断的过时，但是思维不会过时，逻辑不会过时，各位，共勉之。</p>
<hr />
<p>&nbsp;目录</p>
<p>　　一：<a id="cb_post_title_url" href="https://www.cnblogs.com/ttjsndx/p/9942776.html">spring-data-mongodb 使用原生aggregate语句</a></p>
<p>　　二：<a id="cb_post_title_url" href="https://www.cnblogs.com/ttjsndx/p/9947892.html" target="_blank">mongo的runCommand与集合操作函数的关系</a></p>
<p>　　三：<a id="cb_post_title_url" href="https://www.cnblogs.com/ttjsndx/p/9947370.html" target="_blank">spring-data-mongodb与mongo shell的对应关系</a></p>
<p>　　四：<a id="cb_post_title_url" href="https://www.cnblogs.com/ttjsndx/p/9947911.html" target="_blank">mongo中的游标与数据一致性的取舍</a></p>]]></description></item><item><title>spring-data-mongodb与mongo shell的对应关系</title><link>http://www.cnblogs.com/ttjsndx/archive/2018/11/14/9947370.html</link><dc:creator>有营养的yyl</dc:creator><author>有营养的yyl</author><pubDate>Wed, 14 Nov 2018 09:52:00 GMT</pubDate><guid>http://www.cnblogs.com/ttjsndx/archive/2018/11/14/9947370.html</guid><description><![CDATA[<p>除了特殊注释外，本文的测试结果均基于<em><strong>&nbsp;spring-data-mongodb:1.10.6.RELEASE(</strong><strong>spring-boot-starter:1.5.6.RELEASE</strong><strong>)，MongoDB 3.0.6</strong></em></p>
<hr />
<p>&nbsp;　　上一章我们了解了mongo shell中aggregate复杂的互相调用关系。那么，spring-data-mongodb中aggregate又是如何与mongo交互的？是将语句拼接成我们熟悉的函数（db._collection_.find/update...）还是命令（db.runCommand）?让我们来看底层的代码到底是怎么样的。</p>
<p>　　以下为 mongoTemplate.aggregate&nbsp;方法的底层实现</p>
<div class="cnblogs_code">
<pre>    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> sendMessage(<span style="color: #0000ff;">final</span> CommandMessage message, <span style="color: #0000ff;">final</span><span style="color: #000000;"> InternalConnection connection) {
        ByteBufferBsonOutput bsonOutput </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> ByteBufferBsonOutput(connection);
        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            </span><span style="color: #0000ff;">int</span> documentPosition =<span style="color: #000000;"> message.encodeWithMetadata(bsonOutput).getFirstDocumentPosition();
            sendStartedEvent(connection, bsonOutput, message, documentPosition);

            connection.sendMessage(bsonOutput.getByteBuffers(), message.getId());
        } </span><span style="color: #0000ff;">finally</span><span style="color: #000000;"> {
            bsonOutput.close();
        }
    }</span></pre>
</div>
<p>&nbsp;　　在往下就是字节流了，就直接看着里的数据吧，message数据为：</p>
<p style="text-align: center;"><img src="https://img2018.cnblogs.com/blog/1291030/201811/1291030-20181114161826824-2079955639.png" alt="" /></p>
<p style="text-align: left;">&nbsp;　　test是连接的数据库名称，test.$cmd相当于db.$cmd，有过第二章的基础，这里应该明白，这个方法是走runCommand的$cmd集合的。那么相应的&nbsp;<span class="cnblogs_code">mongoTemplate.getDb().command</span>&nbsp;以及&nbsp;<span class="cnblogs_code">mongoTemplate.getCollection("$cmd").findOne</span>&nbsp;都可以拼接出来。</p>
<p style="text-align: left;">　　因为这些方法需要的拼接很复杂的bson，所以这里我们引用另外一个操作符$eval。熟悉js的朋友应该都知道，eval是可以将字符串转换成方法执行的，这里我们就使用原生的aggregate语句字符串，让mongo shell去处理字符串。</p>
<p style="text-align: left;">　　如下是五种使用$eval的方法</p>
<div class="cnblogs_code">
<pre>        //注意：命令的key:value部分，value必须被[]或者{}或者''包裹。js的字符串支持单引号和双引号两种，这里使用单引号是为了避免在java中使用大量的 \<br />　　　　　String command = "db.user.aggregate([{$group:{_id:'$name',count:{$sum:'$age'}}}])"<span style="color: #000000;">;
        BasicDBObject bson </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> BasicDBObject();
        bson.put(</span>"$eval"<span style="color: #000000;">,command);

        Object object1 </span>=<span style="color: #000000;"> mongoTemplate.getDb().doEval(command);
        Object object2 </span>=<span style="color: #000000;">  mongoTemplate.getDb().command(bson);
        Object object3 </span>= mongoTemplate.getCollection("$cmd"<span style="color: #000000;">).findOne(bson);

        ScriptOperations operations </span>=<span style="color: #000000;"> mongoTemplate.scriptOps();
        ExecutableMongoScript script </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> ExecutableMongoScript(command);
        Object object4 </span>=<span style="color: #000000;"> operations.execute(script);

        </span><span style="color: #008000;">/**</span><span style="color: #008000;">
         * call是调用system.js集合中方法的方法，传入参数是sysytem.js表中数据的主键值，
         * 可在mongo shell中天插入或者使用如下代码插入。
         * 插入一次后可直接使用
         </span><span style="color: #008000;">*/</span>
<span style="color: #008000;">//</span><span style="color: #008000;">        String command = "function(){return db.user.aggregate([{$group:{_id:'$name',count:{$sum:'$age'}}}])}";
</span><span style="color: #008000;">//</span><span style="color: #008000;">        NamedMongoScript namedMongoScript = new NamedMongoScript("user2",script);
</span><span style="color: #008000;">//</span><span style="color: #008000;">        operations.register(namedMongoScript);</span>
        Object object5 = operations.call("user2");</pre>
</div>
<p>&nbsp;　　那么，find函数是否也如mongo shell 中，让我们继续来看看底层代码</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">private</span> &lt;T&gt; List&lt;T&gt; executeFindMultiInternal(CollectionCallback&lt;DBCursor&gt;<span style="color: #000000;"> collectionCallback, CursorPreparer preparer,
            DbObjectCallback</span>&lt;T&gt;<span style="color: #000000;"> objectCallback, String collectionName) {
        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            DBCursor cursor </span>= <span style="color: #0000ff;">null</span><span style="color: #000000;">;
            </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
                cursor </span>=<span style="color: #000000;"> collectionCallback.doInCollection(getAndPrepareCollection(getDb(), collectionName));
                </span><span style="color: #0000ff;">if</span> (preparer != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
                    cursor </span>=<span style="color: #000000;"> preparer.prepare(cursor);
                }
                List</span>&lt;T&gt; result = <span style="color: #0000ff;">new</span> ArrayList&lt;T&gt;<span style="color: #000000;">();
                </span><span style="color: #0000ff;">while</span><span style="color: #000000;"> (cursor.hasNext()) {
                    DBObject object </span>=<span style="color: #000000;"> cursor.next();
                    result.add(objectCallback.doWith(object));
                }
                </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> result;
            } </span><span style="color: #0000ff;">finally</span><span style="color: #000000;"> {
                </span><span style="color: #0000ff;">if</span> (cursor != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
                    cursor.close();
                }
            }
        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (RuntimeException e) {
            </span><span style="color: #0000ff;">throw</span><span style="color: #000000;"> potentiallyConvertRuntimeException(e, exceptionTranslator);
        }
    }</span></pre>
</div>
<p>　　我们可以看到find也如mongo shell中一样，走的是游标的路线。</p>
<p>　　通过上面的一系列代码的研究，我们学会了使用多种方法实现原生的aggregate，并且弄明白了aggregate在mongo shell 或者spring-data-mongodb中都存在多层的、暴露的调用方法，而find类型的请求是直接调用到了游标，这样设计的目的是什么？有兴趣的读者可以继续看看第四章&nbsp;<a id="cb_post_title_url" href="https://www.cnblogs.com/ttjsndx/p/9947911.html" target="_blank">mongo中的游标与数据一致性的取舍</a>。</p>
<p>　</p>
<hr />
<p>&nbsp;目录</p>
<p>　　一：<a id="cb_post_title_url" href="https://www.cnblogs.com/ttjsndx/p/9942776.html">spring-data-mongodb 使用原生aggregate语句</a></p>
<p>　　二：<a id="cb_post_title_url" href="https://www.cnblogs.com/ttjsndx/p/9947892.html" target="_blank">mongo的runCommand与集合操作函数的关系</a></p>
<p>　　三：<a id="cb_post_title_url" href="https://www.cnblogs.com/ttjsndx/p/9947370.html" target="_blank">spring-data-mongodb与mongo shell的对应关系</a></p>
<p>　　四：<a id="cb_post_title_url" href="https://www.cnblogs.com/ttjsndx/p/9947911.html" target="_blank">mongo中的游标与数据一致性的取舍</a></p>]]></description></item><item><title>mongo的runCommand与集合操作函数的关系</title><link>http://www.cnblogs.com/ttjsndx/archive/2018/11/12/9947892.html</link><dc:creator>有营养的yyl</dc:creator><author>有营养的yyl</author><pubDate>Mon, 12 Nov 2018 13:40:00 GMT</pubDate><guid>http://www.cnblogs.com/ttjsndx/archive/2018/11/12/9947892.html</guid><description><![CDATA[<p>除了特殊注释外，本文的测试结果均基于<em><strong>&nbsp;spring-data-mongodb:1.10.6.RELEASE(</strong><strong>spring-boot-starter:1.5.6.RELEASE</strong><strong>)，MongoDB 3.0.6</strong></em></p>
<hr />
<h3><span style="color: #0000ff;">&nbsp;一：单纯的主从关系</span></h3>
<p>　　按照我们多年的mvc经验，所有的方法的调用都应该遵循一个从上到下的关系，没有遇到过dao层调service层的。</p>
<p>　　所以主观上我们需要确认一个顺序，是runCommand封装了集合操作函数，还是集合操作函数封装了runCommand?</p>
<p>　　这里我们通过方法的源码来看看（js中所有的方法不加小括号时都可以直接打印出该方法的代码）</p>
<div class="cnblogs_code">
<pre>&gt;<span style="color: #000000;"> db.runCommand
</span><span style="color: #0000ff;">function</span><span style="color: #000000;"> ( obj, extra ){
    </span><span style="color: #0000ff;">if</span> ( <span style="color: #0000ff;">typeof</span>( obj ) == "string"<span style="color: #000000;"> ){
        </span><span style="color: #0000ff;">var</span> n =<span style="color: #000000;"> {};
        n[obj] </span>= 1<span style="color: #000000;">;
        obj </span>=<span style="color: #000000;"> n;
        </span><span style="color: #0000ff;">if</span> ( extra &amp;&amp; <span style="color: #0000ff;">typeof</span>( extra ) == "object"<span style="color: #000000;"> ) {
            </span><span style="color: #0000ff;">for</span> ( <span style="color: #0000ff;">var</span> x <span style="color: #0000ff;">in</span><span style="color: #000000;"> extra ) {
                n[x] </span>=<span style="color: #000000;"> extra[x];
            }
        }
    }
    </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.getCollection( "$cmd"<span style="color: #000000;"> ).findOne( obj );
}</span></pre>
</div>
<p>&nbsp;　　很完美的主从调用关系，符合了我们的审美。</p>
<h3><span style="color: #0000ff;">二、命令&amp;方法，蛋和鸡</span></h3>
<p>　　接下来我们来看一个异类：aggregate。</p>
<div class="cnblogs_code">
<pre>&gt;<span style="color: #000000;"> db.user.aggregate
</span><span style="color: #0000ff;">function</span><span style="color: #000000;"> (pipeline, extraOpts) {
    </span><span style="color: #0000ff;">if</span> (!(pipeline <span style="color: #0000ff;">instanceof</span><span style="color: #000000;"> Array)) {
        </span><span style="color: #008000;">//</span><span style="color: #008000;"> support legacy varargs form. (Also handles db.foo.aggregate())</span>
        pipeline =<span style="color: #000000;"> argumentsToArray(arguments)
        extraOpts </span>=<span style="color: #000000;"> {}
    }
    </span><span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (extraOpts ===<span style="color: #000000;"> undefined) {
        extraOpts </span>=<span style="color: #000000;"> {};
    }

    </span><span style="color: #0000ff;">var</span> cmd =<span style="color: #000000;"> {pipeline: pipeline};
    Object.extend(cmd, extraOpts);

    </span><span style="color: #0000ff;">if</span> (!('cursor' <span style="color: #0000ff;">in</span><span style="color: #000000;"> cmd)) {
        </span><span style="color: #008000;">//</span><span style="color: #008000;"> implicitly use cursors</span>
        cmd.cursor =<span style="color: #000000;"> {};
    }

    </span><span style="color: #0000ff;">var</span> res = <span style="color: #0000ff;">this</span>.runCommand("aggregate"<span style="color: #000000;">, cmd);
    </span><span style="color: #008000;">//</span><span style="color: #008000;">...此处省去了一些无关代码，可自行下载3.0.06版本的mongo查看</span>
    <span style="color: #0000ff;">return</span><span style="color: #000000;"> res;
}</span></pre>
</div>
<p>&nbsp;　　这个runCommand不会就是那个runCommand吧？，让我们将this替换为方法的调用对象db.user。（关于js中this指代的对象建议阅读王福朋的深入理解javascript的原型和闭包）</p>
<div class="cnblogs_code">
<pre>&gt;<span style="color: #000000;"> db.user.runCommand
</span><span style="color: #0000ff;">function</span><span style="color: #000000;"> ( cmd , params ){
    </span><span style="color: #0000ff;">if</span> ( <span style="color: #0000ff;">typeof</span>( cmd ) == "object"<span style="color: #000000;"> )
        </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span><span style="color: #000000;">._db._dbCommand( cmd );

    </span><span style="color: #0000ff;">var</span> c =<span style="color: #000000;"> {};
    c[cmd] </span>= <span style="color: #0000ff;">this</span><span style="color: #000000;">.getName();
    </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> ( params )
        Object.extend( c , params );
    </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span><span style="color: #000000;">._db._dbCommand( c );
}</span></pre>
</div>
<p>　　让我们再替换掉this，继续往下看。</p>
<div class="cnblogs_code">
<pre>&gt;<span style="color: #000000;"> db.user._db._dbCommand
</span><span style="color: #0000ff;">function</span><span style="color: #000000;"> ( obj, extra ){
    </span><span style="color: #0000ff;">if</span> ( <span style="color: #0000ff;">typeof</span>( obj ) == "string"<span style="color: #000000;"> ){
        </span><span style="color: #0000ff;">var</span> n =<span style="color: #000000;"> {};
        n[obj] </span>= 1<span style="color: #000000;">;
        obj </span>=<span style="color: #000000;"> n;
        </span><span style="color: #0000ff;">if</span> ( extra &amp;&amp; <span style="color: #0000ff;">typeof</span>( extra ) == "object"<span style="color: #000000;"> ) {
            </span><span style="color: #0000ff;">for</span> ( <span style="color: #0000ff;">var</span> x <span style="color: #0000ff;">in</span><span style="color: #000000;"> extra ) {
                n[x] </span>=<span style="color: #000000;"> extra[x];
            }
        }
    }
    </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.getCollection( "$cmd"<span style="color: #000000;"> ).findOne( obj );
}</span></pre>
</div>
<p>　　db._collection_.aggregate()绕了一大圈，又回到了db.$cmd.findOne()。为什么不让aggregate直接调用findOne，再让db.runCommand{{"aggregate":"_collection_","pipeline":[]}}调用db._collection_.aggregate？这种鸡生蛋，蛋生鸡的结构，后期又该如何快速的进行版本升级？这样做的原因我们在第四章 <a id="cb_post_title_url" href="https://www.cnblogs.com/ttjsndx/p/9947911.html" target="_blank">MONGO中的特殊集合$CMD</a> 中会讲。现在我们先记住aggregate的这种调用模式，然后研究在spring-data-mongodb中，该从哪一层入手使用原生的aggregate查询。</p>
<hr />
<p>&nbsp;目录</p>
<p>　　一：<a id="cb_post_title_url" href="https://www.cnblogs.com/ttjsndx/p/9942776.html">spring-data-mongodb 使用原生aggregate语句</a></p>
<p>　　二：<a id="cb_post_title_url" href="https://www.cnblogs.com/ttjsndx/p/9947892.html" target="_blank">mongo的runCommand与集合操作函数的关系</a></p>
<p>　　三：<a id="cb_post_title_url" href="https://www.cnblogs.com/ttjsndx/p/9947370.html" target="_blank">spring-data-mongodb与mongo shell的对应关系</a></p>
<p>　　四：<a id="cb_post_title_url" href="https://www.cnblogs.com/ttjsndx/p/9947911.html" target="_blank">mongo中的游标与数据一致性的取舍</a></p>
<p>&nbsp;　　</p>]]></description></item><item><title>spring-data-mongodb 使用原生aggregate语句</title><link>http://www.cnblogs.com/ttjsndx/archive/2018/11/12/9942776.html</link><dc:creator>有营养的yyl</dc:creator><author>有营养的yyl</author><pubDate>Mon, 12 Nov 2018 13:40:00 GMT</pubDate><guid>http://www.cnblogs.com/ttjsndx/archive/2018/11/12/9942776.html</guid><description><![CDATA[<p>除了特殊注释外，本文的测试结果均基于<em><strong> spring-data-mongodb:1.10.6.RELEASE(</strong><strong>spring-boot-starter:1.5.6.RELEASE</strong><strong>)，MongoDB 3.0.6</strong></em></p>
<hr />
<p>&nbsp;　　考虑到大多数人都是来找答案的，所以先给出结论</p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">//</span><span style="color: #008000;"> import org.springframework.data.mongodb.core.MongoTemplate;</span>
mongoTemplate.getDb().doEval(<span style="color: #008000;">"db.user.aggregate([{$group:{_id:'$name',count:{$sum:'$age'}}}])"</span>);</pre>
</div>
<p>注意：</p>
<p>　　1、mongo shell 使用js语法，可以使用单引号或者双引号表示字符串，这里使用单引号，可以避免大量的 \ 转义符</p>
<p>　　2、原生语句中的key:value部分，value只能是 [xxx] 、{xxx} 、 &lsquo;xxx&rsquo; 三种格式的数据。</p>
<p>　　新版本的spring-data-mongodb已经去掉了doEval方法，我们可以使用下面的方法自己拼接</p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">//</span><span style="color: #008000;">spring-boot-starter:2.1.0.RELEASE spring-data-mongodb:2.1.2.RELEASE</span>
BasicDBObject bson = <span style="color: #0000ff;">new</span><span style="color: #000000;"> BasicDBObject();
bson.put(</span><span style="color: #008000;">"$eval"</span>,<span style="color: #008000;">"db.user.aggregate([{$group:{_id:'$name',count:{$sum:'$age'}}}])"</span><span style="color: #000000;">);
Object object </span>= mongoTemplate.getDb().runCommand(bson);</pre>
</div>
<p>　　其他的解决方法，如调用存储过程、拼接完整的BasicDBObject、继承Aggregate请见第三章：<a id="cb_post_title_url" href="https://www.cnblogs.com/ttjsndx/p/9947370.html" target="_blank">SPRING-DATA-MONGODB底层与MONGO-DRIVER的交互</a></p>
<hr />
<p>&nbsp;</p>
<p>　　研究这个是因为遇到了一个业务需求，需要使用多种限制条件，返回多个统计字段。spring-data-mongodb提供的API不足以实现这么复杂的业务，所以就想到了直接使用原生的aggregate查询。</p>
<p>　　mongo底层实现查询的方法主要有两种，一种是 db._collection_.doSomething({ ... }) ，另一种是db.runCommand({doSomething:_collection_ , ... }) ，我们将第一种称作<strong>函数</strong>，第二种称作<strong>命令</strong>。</p>
<p>　　那么，哪种才是 aggregate的原生查询？spring-data-mongodb底层究竟调用的是函数还是命令？如果你只是想完成工作的话，copy上面的代码，然后右上角点&times;，如果你想解决问题学点东西的话，欢迎继续看下去</p>
<hr />
<p>&nbsp;目录</p>
<p>　　一：<a id="cb_post_title_url" href="https://www.cnblogs.com/ttjsndx/p/9942776.html">spring-data-mongodb 使用原生aggregate语句</a></p>
<p>　　二：<a id="cb_post_title_url" href="https://www.cnblogs.com/ttjsndx/p/9947892.html" target="_blank">mongo的runCommand与集合操作函数的关系</a></p>
<p>　　三：<a id="cb_post_title_url" href="https://www.cnblogs.com/ttjsndx/p/9947370.html" target="_blank">spring-data-mongodb与mongo shell的对应关系</a></p>
<p>　　四：<a id="cb_post_title_url" href="https://www.cnblogs.com/ttjsndx/p/9947911.html" target="_blank">mongo中的游标与数据一致性的取舍</a></p>]]></description></item><item><title>微服务名调用服务方案</title><link>http://www.cnblogs.com/ttjsndx/archive/2018/11/09/9934209.html</link><dc:creator>有营养的yyl</dc:creator><author>有营养的yyl</author><pubDate>Fri, 09 Nov 2018 03:39:00 GMT</pubDate><guid>http://www.cnblogs.com/ttjsndx/archive/2018/11/09/9934209.html</guid><description><![CDATA[<p>　　微服务的引用做成类似jar包的引用，但是不需要pom配置，由一个单独的微服务来管理微服名和调用地址及端口的关系，这个关系需要通过kubernetes的自动部署后自动生成。</p>
<p>　　在类中，我们只需要通过特殊的注释@xrService来注入微服务。</p>]]></description></item><item><title>mongo-2ds索引对超过半球范围的适用性测试</title><link>http://www.cnblogs.com/ttjsndx/archive/2018/10/20/9750694.html</link><dc:creator>有营养的yyl</dc:creator><author>有营养的yyl</author><pubDate>Sat, 20 Oct 2018 11:12:00 GMT</pubDate><guid>http://www.cnblogs.com/ttjsndx/archive/2018/10/20/9750694.html</guid><description><![CDATA[<p>　　以下测试均基于mongo v4.0 win10</p>
<hr />
<p><em><strong><span style="font-size: 14pt;">一、GeoJSON</span></strong></em></p>
<p>　　GeoJSON是一种基于json的经纬度描述数据格式。在这里主要服务于2dsphere索引查询。</p>
<p>　　基本格式&nbsp;&nbsp;<span class="cnblogs_code">&lt;type:"",coordinates:[]&gt;</span> ，type 对应的类型有<strong>Point、LineString(老版本有写Line的)、Polygon、MultiPoint、MultiLineString、MultiPolygon</strong>。coordinates对应格式可参照【表1】。</p>
<p>更详细的请自行百度。</p>
<p><em><strong><span style="font-size: 14pt;">二、2dsphere索引。</span></strong></em></p>
<p>　　基于地球的经纬度。举例如下</p>
<p>　　存在点 【28，2】，则以下区域是否与该点存在交集（$geoIntersects）的情况为</p>
<table style="width: 617px; height: 173px;" border="0"><caption>表1</caption>
<tbody>
<tr>
<td style="text-align: center;">&nbsp;</td>
<td style="text-align: center;">type</td>
<td style="text-align: center;">coordinates</td>
<td style="text-align: center;">是否包含</td>
</tr>
<tr>
<td style="text-align: left;">1</td>
<td style="text-align: left;">Point</td>
<td style="text-align: left;">[28,2]</td>
<td style="text-align: left;">是</td>
</tr>
<tr>
<td>2</td>
<td>LineString</td>
<td>[[28,1],[28,3]]</td>
<td>是</td>
</tr>
<tr>
<td>3</td>
<td>LineString</td>
<td>[[28,3],[28,1]]</td>
<td>是</td>
</tr>
<tr>
<td>4</td>
<td>LineString</td>
<td>[[27,2],[29,2]]</td>
<td>否</td>
</tr>
<tr>
<td>5</td>
<td>LineString</td>
<td>[[29,2],[27,2]]</td>
<td>否</td>
</tr>
<tr>
<td>6</td>
<td>Polygon</td>
<td>[[[27,1],[27,3],[29,3],[29,1],[27,1]]]</td>
<td>是</td>
</tr>
<tr>
<td>7</td>
<td>Polygon</td>
<td>[[[27,3],[27,1],[29,1],[29,3],[27,3]]]</td>
<td>是</td>
</tr>
<tr>
<td>8</td>
<td>Polygon</td>
<td>[[[29,1],[29,3],[27,3],[27,1],[29,1]]]</td>
<td>是</td>
</tr>
<tr>
<td>9</td>
<td>Polygon</td>
<td>[[[29,3],[29,1],[27,1],[27,3],[29,3]]]</td>
<td>是</td>
</tr>
</tbody>
</table>
<p>　　<span style="text-decoration: line-through;">从LineString的四个例子中我们可以得出：getIntersects对LineString的支持性并不高，不过考虑到现实场景中的查询，都是以一个面积为参考的，所以LineString的测验只了解一个结果，不再深入研究。</span></p>
<p>　　从Polygon的四个例子中我们可以暂时得出：GeoJSON的数组是不在乎顺序的，为了验证这个观点，我们再补做方向性的测试数据。</p>
<p><span style="font-size: 14pt;"><em><strong>三、geoIntersects的方向性研究</strong></em></span></p>
<table style="width: 616px; height: 171px;" border="0"><caption>表2</caption>
<tbody>
<tr>
<td style="text-align: center;">&nbsp;</td>
<td style="text-align: center;">type</td>
<td style="text-align: center;">coordinates</td>
<td style="text-align: center;">是否包含</td>
</tr>
<tr>
<td>1</td>
<td>Polygon</td>
<td>[[[27,1],[29,1],[29,3],[27,3],[27,1]]]</td>
<td>是</td>
</tr>
<tr>
<td>2</td>
<td>Polygon</td>
<td>[[[27,3],[29,3],[29,1],[27,1],[27,3]]]</td>
<td>是</td>
</tr>
<tr>
<td>3</td>
<td>Polygon</td>
<td>[[[29,3],[27,3],[27,1],[29,1],[29,3]]]</td>
<td>是</td>
</tr>
<tr>
<td>4</td>
<td>Polygon</td>
<td>[[[29,1],[27,1],[27,3],[29,3],[29,1]]]</td>
<td>是</td>
</tr>
<tr>
<td>5</td>
<td>Polygon</td>
<td>[[[29,1],[-27,3],[-27,3],[29,3],[29,1]]]</td>
<td>是</td>
</tr>
<tr>
<td>6</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>7</td>
<td>&nbsp;Polygon</td>
<td>[[[-179,1],[27,1],[27,3],[-179,3],[-179,1]]]</td>
<td>是</td>
</tr>
<tr>
<td>8</td>
<td>Polygon</td>
<td>[[[0,90],[180,90],[180,-90],[0,-90],[0,90]]]</td>
<td>否</td>
</tr>
<tr>
<td>9</td>
<td>Polygon</td>
<td>[[[0,90],[0,-90],[180,-90],[180,90],[0,90]]]</td>
<td>是</td>
</tr>
<tr>
<td>10</td>
<td>Polygon</td>
<td>[[[0,-90],[0,90],[180,90],[180,-90],[0,-90]]]</td>
<td>否</td>
</tr>
<tr>
<td>11</td>
<td>Polygon</td>
<td>[[[0,-90],[180,-90],[180,90],[0,90],[0,-90]]]</td>
<td>是</td>
</tr>
<tr>
<td>12</td>
<td>Polygon</td>
<td>[[[180,-90],[0,-90],[0,90],[180,90],[180,-90]]]</td>
<td>否</td>
</tr>
<tr>
<td>13</td>
<td>Polygon</td>
<td>[[[180,90],[0,90],[0,-90],[180,-90],[180,90]]]</td>
<td>是</td>
</tr>
<tr>
<td>14</td>
<td>Polygon</td>
<td>[[[180,90],[180,-90],[0,-90],[0,90],[180,90]]]</td>
<td>否</td>
</tr>
<tr>
<td>16</td>
<td>Polygon</td>
<td>[[[180,-90],[180,90],[0,90],[0,-90],[180,-90]]]</td>
<td>是</td>
</tr>
</tbody>
</table>
<p style="text-align: left;">　　根据【表2编号1-5】到验证了以上的猜想，GeoJSON数组代表的区域是 ： <strong>数组中的点连接成线，将经纬度网划分成两块，取面积小的那一块作为选定区域，进行筛选判定</strong>。</p>
<p style="text-align: left;">　　但是如果所选范围扩大到整个半球甚至更大，GeoJSON的数组该如何选择判定区域？从【表2编号7-16】中，我们什么也不能得出来，整个查询呈现出一种混乱的状态。又进行大量的对比实验，做了各种统计分析图后，结论依旧混乱，我甚至还去文具店买了一个地球仪。。。</p>
<p style="text-align: left;">　　网上进行了大量查询，最后还是在官网找到了一些信息。3.0版本以后$within(表示包含)、$geoIntersects的Polygon查询支持新的参数：crs。可以指定特殊的索引范围划分方式。如EPSG:4326，判定区域时具有严格的逆时针顺序。更多更全的知识请移步&nbsp;<a href="https://docs.mongodb.com/manual/reference/operator/query/geoIntersects/#geointersects-big-poly" target="_blank">https://docs.mongodb.com/manual/reference/operator/query/geoIntersects/#geointersects-big-poly</a></p>
<p style="text-align: left;">　　<strong>但是经过测验发现，4.0版本默认了EPSG:4326，加与不加，影响不大，测验如下（$within与$geoIntersects结果一致）：</strong></p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> &gt; db.people.<span style="color: #0000ff;">find</span>({<span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">$within</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">$geometry</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">Polygon</span><span style="color: #800000;">"</span>,<span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span>:[[[<span style="color: #800080;">27</span>,<span style="color: #800080;">1</span>],[<span style="color: #800080;">29</span>,<span style="color: #800080;">1</span>],[<span style="color: #800080;">29</span>,<span style="color: #800080;">3</span>],[<span style="color: #800080;">27</span>,<span style="color: #800080;">3</span>],[<span style="color: #800080;">27</span>,<span style="color: #800080;">1</span>]]],crs:{type:<span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span>,properties:{name:<span style="color: #800000;">"</span><span style="color: #800000;">urn:x-mongodb:crs:strictwinding:EPSG:4326</span><span style="color: #800000;">"</span><span style="color: #000000;">}}}}}});
</span><span style="color: #008080;">2</span> { <span style="color: #800000;">"</span><span style="color: #800000;">_id</span><span style="color: #800000;">"</span> : ObjectId(<span style="color: #800000;">"</span><span style="color: #800000;">5bb4c46d0c2287bbf737427e</span><span style="color: #800000;">"</span>), <span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">王五</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">age</span><span style="color: #800000;">"</span> : <span style="color: #800080;">26</span>, <span style="color: #800000;">"</span><span style="color: #800000;">sex</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">男</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span> : { <span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">Point</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span> : [ <span style="color: #800080;">28</span>, <span style="color: #800080;">2</span><span style="color: #000000;"> ] } }
</span><span style="color: #008080;">3</span> &gt; db.people.<span style="color: #0000ff;">find</span>({<span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">$within</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">$geometry</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">Polygon</span><span style="color: #800000;">"</span>,<span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span>:[[[<span style="color: #800080;">29</span>,<span style="color: #800080;">1</span>],[<span style="color: #800080;">29</span>,<span style="color: #800080;">3</span>],[<span style="color: #800080;">27</span>,<span style="color: #800080;">3</span>],[<span style="color: #800080;">27</span>,<span style="color: #800080;">1</span>],[<span style="color: #800080;">29</span>,<span style="color: #800080;">1</span>]]],crs:{type:<span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span>,properties:{name:<span style="color: #800000;">"</span><span style="color: #800000;">urn:x-mongodb:crs:strictwinding:EPSG:4326</span><span style="color: #800000;">"</span><span style="color: #000000;">}}}}}});
</span><span style="color: #008080;">4</span> { <span style="color: #800000;">"</span><span style="color: #800000;">_id</span><span style="color: #800000;">"</span> : ObjectId(<span style="color: #800000;">"</span><span style="color: #800000;">5bb4c46d0c2287bbf737427e</span><span style="color: #800000;">"</span>), <span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">王五</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">age</span><span style="color: #800000;">"</span> : <span style="color: #800080;">26</span>, <span style="color: #800000;">"</span><span style="color: #800000;">sex</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">男</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span> : { <span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">Point</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span> : [ <span style="color: #800080;">28</span>, <span style="color: #800080;">2</span><span style="color: #000000;"> ] } }
</span><span style="color: #008080;">5</span> &gt; db.people.<span style="color: #0000ff;">find</span>({<span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">$within</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">$geometry</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">Polygon</span><span style="color: #800000;">"</span>,<span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span>:[[[<span style="color: #800080;">29</span>,<span style="color: #800080;">3</span>],[<span style="color: #800080;">27</span>,<span style="color: #800080;">3</span>],[<span style="color: #800080;">27</span>,<span style="color: #800080;">1</span>],[<span style="color: #800080;">29</span>,<span style="color: #800080;">1</span>],[<span style="color: #800080;">29</span>,<span style="color: #800080;">3</span>]]],crs:{type:<span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span>,properties:{name:<span style="color: #800000;">"</span><span style="color: #800000;">urn:x-mongodb:crs:strictwinding:EPSG:4326</span><span style="color: #800000;">"</span><span style="color: #000000;">}}}}}});
</span><span style="color: #008080;">6</span> { <span style="color: #800000;">"</span><span style="color: #800000;">_id</span><span style="color: #800000;">"</span> : ObjectId(<span style="color: #800000;">"</span><span style="color: #800000;">5bb4c46d0c2287bbf737427e</span><span style="color: #800000;">"</span>), <span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">王五</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">age</span><span style="color: #800000;">"</span> : <span style="color: #800080;">26</span>, <span style="color: #800000;">"</span><span style="color: #800000;">sex</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">男</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span> : { <span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">Point</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span> : [ <span style="color: #800080;">28</span>, <span style="color: #800080;">2</span><span style="color: #000000;"> ] } }
</span><span style="color: #008080;">7</span> &gt; db.people.<span style="color: #0000ff;">find</span>({<span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">$within</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">$geometry</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">Polygon</span><span style="color: #800000;">"</span>,<span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span>:[[[<span style="color: #800080;">27</span>,<span style="color: #800080;">3</span>],[<span style="color: #800080;">27</span>,<span style="color: #800080;">1</span>],[<span style="color: #800080;">29</span>,<span style="color: #800080;">1</span>],[<span style="color: #800080;">29</span>,<span style="color: #800080;">3</span>],[<span style="color: #800080;">27</span>,<span style="color: #800080;">3</span>]]],crs:{type:<span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span>,properties:{name:<span style="color: #800000;">"</span><span style="color: #800000;">urn:x-mongodb:crs:strictwinding:EPSG:4326</span><span style="color: #800000;">"</span><span style="color: #000000;">}}}}}});
</span><span style="color: #008080;">8</span> { <span style="color: #800000;">"</span><span style="color: #800000;">_id</span><span style="color: #800000;">"</span> : ObjectId(<span style="color: #800000;">"</span><span style="color: #800000;">5bb4c46d0c2287bbf737427e</span><span style="color: #800000;">"</span>), <span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">王五</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">age</span><span style="color: #800000;">"</span> : <span style="color: #800080;">26</span>, <span style="color: #800000;">"</span><span style="color: #800000;">sex</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">男</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span> : { <span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">Point</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span> : [ <span style="color: #800080;">28</span>, <span style="color: #800080;">2</span><span style="color: #000000;"> ] } }
</span><span style="color: #008080;">9</span> &gt; db.people.<span style="color: #0000ff;">find</span>({<span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">$within</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">$geometry</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">Polygon</span><span style="color: #800000;">"</span>,<span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span>:[[[<span style="color: #800080;">27</span>,<span style="color: #800080;">1</span>],[<span style="color: #800080;">27</span>,<span style="color: #800080;">3</span>],[<span style="color: #800080;">29</span>,<span style="color: #800080;">3</span>],[<span style="color: #800080;">29</span>,<span style="color: #800080;">1</span>],[<span style="color: #800080;">27</span>,<span style="color: #800080;">1</span>]]],crs:{type:<span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span>,properties:{name:<span style="color: #800000;">"</span><span style="color: #800000;">urn:x-mongodb:crs:strictwinding:EPSG:4326</span><span style="color: #800000;">"</span>}}}}}});</pre>
</div>
<p>　　<strong>甚至会出现这种莫名其妙的结果：</strong></p>
<div class="cnblogs_code">
<pre>&gt; db.people.<span style="color: #0000ff;">find</span>({<span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">$geoIntersects</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">$geometry</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">Polygon</span><span style="color: #800000;">"</span>,<span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span>:[[[<span style="color: #800080;">0</span>,<span style="color: #800080;">1</span>],[<span style="color: #800080;">79</span>,<span style="color: #800080;">1</span>],[<span style="color: #800080;">79</span>,<span style="color: #800080;">3</span>],[<span style="color: #800080;">0</span>,<span style="color: #800080;">3</span>],[<span style="color: #800080;">0</span>,<span style="color: #800080;">1</span>]]],crs:{type:<span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span>,properties:{name:<span style="color: #800000;">"</span><span style="color: #800000;">urn:x-mongodb:crs:strictwinding:EPSG:4326</span><span style="color: #800000;">"</span><span style="color: #000000;">}}}}}});
{ </span><span style="color: #800000;">"</span><span style="color: #800000;">_id</span><span style="color: #800000;">"</span> : ObjectId(<span style="color: #800000;">"</span><span style="color: #800000;">5bcafe07377b37ef8e160bc7</span><span style="color: #800000;">"</span>), <span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span> : { <span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">Point</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span> : [ <span style="color: #800080;">2</span>, <span style="color: #800080;">2</span><span style="color: #000000;"> ] } }
{ </span><span style="color: #800000;">"</span><span style="color: #800000;">_id</span><span style="color: #800000;">"</span> : ObjectId(<span style="color: #800000;">"</span><span style="color: #800000;">5bb4c46d0c2287bbf737427e</span><span style="color: #800000;">"</span>), <span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">王五</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">age</span><span style="color: #800000;">"</span> : <span style="color: #800080;">26</span>, <span style="color: #800000;">"</span><span style="color: #800000;">sex</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">男</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span> : { <span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">Point</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span> : [ <span style="color: #800080;">28</span>, <span style="color: #800080;">2</span><span style="color: #000000;"> ] } }
{ </span><span style="color: #800000;">"</span><span style="color: #800000;">_id</span><span style="color: #800000;">"</span> : ObjectId(<span style="color: #800000;">"</span><span style="color: #800000;">5bb4290d0c2287bbf737427d</span><span style="color: #800000;">"</span>), <span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">ww wu</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">age</span><span style="color: #800000;">"</span> : <span style="color: #800080;">40</span>, <span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span> : { <span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">Point</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span> : [ <span style="color: #800080;">50</span>, <span style="color: #800080;">2</span><span style="color: #000000;"> ] } }
</span>&gt; db.people.<span style="color: #0000ff;">find</span>({<span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">$geoIntersects</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">$geometry</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">Polygon</span><span style="color: #800000;">"</span>,<span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span>:[[[<span style="color: #800080;">0</span>,<span style="color: #800080;">1</span>],[<span style="color: #800080;">124</span>,<span style="color: #800080;">1</span>],[<span style="color: #800080;">124</span>,<span style="color: #800080;">3</span>],[<span style="color: #800080;">0</span>,<span style="color: #800080;">3</span>],[<span style="color: #800080;">0</span>,<span style="color: #800080;">1</span>]]],crs:{type:<span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span>,properties:{name:<span style="color: #800000;">"</span><span style="color: #800000;">urn:x-mongodb:crs:strictwinding:EPSG:4326</span><span style="color: #800000;">"</span><span style="color: #000000;">}}}}}});
{ </span><span style="color: #800000;">"</span><span style="color: #800000;">_id</span><span style="color: #800000;">"</span> : ObjectId(<span style="color: #800000;">"</span><span style="color: #800000;">5bcafe07377b37ef8e160bc7</span><span style="color: #800000;">"</span>), <span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span> : { <span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">Point</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span> : [ <span style="color: #800080;">2</span>, <span style="color: #800080;">2</span><span style="color: #000000;"> ] } }
{ </span><span style="color: #800000;">"</span><span style="color: #800000;">_id</span><span style="color: #800000;">"</span> : ObjectId(<span style="color: #800000;">"</span><span style="color: #800000;">5bb4c46d0c2287bbf737427e</span><span style="color: #800000;">"</span>), <span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">王五</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">age</span><span style="color: #800000;">"</span> : <span style="color: #800080;">26</span>, <span style="color: #800000;">"</span><span style="color: #800000;">sex</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">男</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span> : { <span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">Point</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span> : [ <span style="color: #800080;">28</span>, <span style="color: #800080;">2</span><span style="color: #000000;"> ] } }
</span>&gt; db.people.<span style="color: #0000ff;">find</span>({<span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">$geoIntersects</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">$geometry</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">Polygon</span><span style="color: #800000;">"</span>,<span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span>:[[[<span style="color: #800080;">0</span>,<span style="color: #800080;">1</span>],[<span style="color: #800080;">120</span>,<span style="color: #800080;">1</span>],[<span style="color: #800080;">120</span>,<span style="color: #800080;">3</span>],[<span style="color: #800080;">0</span>,<span style="color: #800080;">3</span>],[<span style="color: #800080;">0</span>,<span style="color: #800080;">1</span>]]],crs:{type:<span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span>,properties:{name:<span style="color: #800000;">"</span><span style="color: #800000;">urn:x-mongodb:crs:strictwinding:EPSG:4326</span><span style="color: #800000;">"</span><span style="color: #000000;">}}}}}});
{ </span><span style="color: #800000;">"</span><span style="color: #800000;">_id</span><span style="color: #800000;">"</span> : ObjectId(<span style="color: #800000;">"</span><span style="color: #800000;">5bcafe07377b37ef8e160bc7</span><span style="color: #800000;">"</span>), <span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span> : { <span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">Point</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span> : [ <span style="color: #800080;">2</span>, <span style="color: #800080;">2</span><span style="color: #000000;"> ] } }
{ </span><span style="color: #800000;">"</span><span style="color: #800000;">_id</span><span style="color: #800000;">"</span> : ObjectId(<span style="color: #800000;">"</span><span style="color: #800000;">5bb4c46d0c2287bbf737427e</span><span style="color: #800000;">"</span>), <span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">王五</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">age</span><span style="color: #800000;">"</span> : <span style="color: #800080;">26</span>, <span style="color: #800000;">"</span><span style="color: #800000;">sex</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">男</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span> : { <span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">Point</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span> : [ <span style="color: #800080;">28</span>, <span style="color: #800080;">2</span><span style="color: #000000;"> ] } }
{ </span><span style="color: #800000;">"</span><span style="color: #800000;">_id</span><span style="color: #800000;">"</span> : ObjectId(<span style="color: #800000;">"</span><span style="color: #800000;">5bb4290d0c2287bbf737427d</span><span style="color: #800000;">"</span>), <span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">ww wu</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">age</span><span style="color: #800000;">"</span> : <span style="color: #800080;">40</span>, <span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span> : { <span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">Point</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span> : [ <span style="color: #800080;">50</span>, <span style="color: #800080;">2</span> ] } }</pre>
</div>
<p>　　可以看出，<strong>mongo对于2ds索引的支持度并不高</strong>。那么我们完全按照官方文档的格式进行测试，看能不能得出一个有规律的结果。</p>
<p>　　官方文档的格式：</p>
<p>　　</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">db.places.find(
   {
     loc: {
       $geoIntersects: {
          $geometry: {
             type : </span>"Polygon"<span style="color: #000000;">,
             coordinates: [
               [
                 [ </span>-100, 60 ], [ -100, 0 ], [ -100, -60 ], [ 100, -60 ], [ 100, 60 ], [ -100, 60<span style="color: #000000;"> ]
               ]
             ],
             crs: {
                type: </span>"name"<span style="color: #000000;">,
                properties: { name: </span>"urn:x-mongodb:crs:strictwinding:EPSG:4326"<span style="color: #000000;"> }
             }
          }
       }
     }
   }
)</span></pre>
</div>
<p>&nbsp;　　格式定义如下：</p>
<p>　　1、首尾相接（以前测试的数组都是满足的）</p>
<p>　　2、逆时针方向书写</p>
<div class="cnblogs_code">
<pre>&gt; db.people.<span style="color: #0000ff;">find</span>({<span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">$geoIntersects</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">$geometry</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">Polygon</span><span style="color: #800000;">"</span>,<span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span>:[[[<span style="color: #800080;">0</span>,<span style="color: #800080;">3</span>],[<span style="color: #800080;">0</span>,-<span style="color: #800080;">1</span>],[<span style="color: #800080;">179</span>,-<span style="color: #800080;">1</span>],[<span style="color: #800080;">179</span>,<span style="color: #800080;">3</span>],[<span style="color: #800080;">0</span>,<span style="color: #800080;">3</span>]]],crs:{type:<span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span>,properties:{name:<span style="color: #800000;">"</span><span style="color: #800000;">urn:x-mongodb:crs:strictwinding:EPSG:4326</span><span style="color: #800000;">"</span><span style="color: #000000;">}}}}}});
{ </span><span style="color: #800000;">"</span><span style="color: #800000;">_id</span><span style="color: #800000;">"</span> : ObjectId(<span style="color: #800000;">"</span><span style="color: #800000;">5bcafe07377b37ef8e160bc7</span><span style="color: #800000;">"</span>), <span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span> : { <span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">Point</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span> : [ <span style="color: #800080;">2</span>, <span style="color: #800080;">2</span><span style="color: #000000;"> ] } }
{ </span><span style="color: #800000;">"</span><span style="color: #800000;">_id</span><span style="color: #800000;">"</span> : ObjectId(<span style="color: #800000;">"</span><span style="color: #800000;">5bcb0145377b37ef8e160bcb</span><span style="color: #800000;">"</span>), <span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span> : { <span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">Point</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span> : [ <span style="color: #800080;">2</span>, <span style="color: #800080;">4</span><span style="color: #000000;"> ] } }
{ </span><span style="color: #800000;">"</span><span style="color: #800000;">_id</span><span style="color: #800000;">"</span> : ObjectId(<span style="color: #800000;">"</span><span style="color: #800000;">5bb4c46d0c2287bbf737427e</span><span style="color: #800000;">"</span>), <span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">王五</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">age</span><span style="color: #800000;">"</span> : <span style="color: #800080;">26</span>, <span style="color: #800000;">"</span><span style="color: #800000;">sex</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">男</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span> : { <span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">Point</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span> : [ <span style="color: #800080;">28</span>, <span style="color: #800080;">2</span><span style="color: #000000;"> ] } }
{ </span><span style="color: #800000;">"</span><span style="color: #800000;">_id</span><span style="color: #800000;">"</span> : ObjectId(<span style="color: #800000;">"</span><span style="color: #800000;">5bcb0158377b37ef8e160bcc</span><span style="color: #800000;">"</span>), <span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span> : { <span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">Point</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span> : [ <span style="color: #800080;">2</span>, -<span style="color: #800080;">2</span><span style="color: #000000;"> ] } }
{ </span><span style="color: #800000;">"</span><span style="color: #800000;">_id</span><span style="color: #800000;">"</span> : ObjectId(<span style="color: #800000;">"</span><span style="color: #800000;">5bb4290d0c2287bbf737427d</span><span style="color: #800000;">"</span>), <span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">ww wu</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">age</span><span style="color: #800000;">"</span> : <span style="color: #800080;">40</span>, <span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span> : { <span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span> : <span style="color: #800000;">"</span><span style="color: #800000;">Point</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span> : [ <span style="color: #800080;">50</span>, <span style="color: #800080;">2</span><span style="color: #000000;"> ] } }
</span>&gt; db.people.<span style="color: #0000ff;">find</span>({<span style="color: #800000;">"</span><span style="color: #800000;">add</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">$geoIntersects</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">$geometry</span><span style="color: #800000;">"</span>:{<span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span>:<span style="color: #800000;">"</span><span style="color: #800000;">Polygon</span><span style="color: #800000;">"</span>,<span style="color: #800000;">"</span><span style="color: #800000;">coordinates</span><span style="color: #800000;">"</span>:[[[<span style="color: #800080;">0</span>,<span style="color: #800080;">3</span>],[<span style="color: #800080;">0</span>,<span style="color: #800080;">1</span>],[<span style="color: #800080;">179</span>,<span style="color: #800080;">1</span>],[<span style="color: #800080;">179</span>,<span style="color: #800080;">3</span>],[<span style="color: #800080;">0</span>,<span style="color: #800080;">3</span>]]],crs:{type:<span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span>,properties:{name:<span style="color: #800000;">"</span><span style="color: #800000;">urn:x-mongodb:crs:strictwinding:EPSG:4326</span><span style="color: #800000;">"</span>}}}}}});</pre>
</div>
<p>　　讲道理，完全没有道理。</p>
<hr />
<p>　　总结，2ds对于小范围的within(包含)，geoIntersects（相交）的支持是正常的，超过半球或者接近半球时，判定方式让人摸不着头脑。如果有懂的大神看见了。麻烦指教以下。</p>
<p style="text-align: left;">　　</p>
<p>&nbsp;</p>]]></description></item><item><title>mongoDB-Cannot change the size of a document in a capped collection:</title><link>http://www.cnblogs.com/ttjsndx/archive/2018/10/03/9741067.html</link><dc:creator>有营养的yyl</dc:creator><author>有营养的yyl</author><pubDate>Wed, 03 Oct 2018 14:16:00 GMT</pubDate><guid>http://www.cnblogs.com/ttjsndx/archive/2018/10/03/9741067.html</guid><description><![CDATA[<p>　　简单记录一下：</p>
<p>　　造成该问题的原因是集合被设置成了 固定集合 。固定集合的数据不能被修改。只能查找-删除-再插入</p>]]></description></item><item><title>springboot - websocket实现及原理</title><link>http://www.cnblogs.com/ttjsndx/archive/2018/07/30/9268800.html</link><dc:creator>有营养的yyl</dc:creator><author>有营养的yyl</author><pubDate>Mon, 30 Jul 2018 14:16:00 GMT</pubDate><guid>http://www.cnblogs.com/ttjsndx/archive/2018/07/30/9268800.html</guid><description><![CDATA[<p>本文章包括websocket面试相关问题以及spring boot如何整合webSocket。</p>
<p>参考文档 https://blog.csdn.net/prayallforyou/article/details/53737901 、https://www.cnblogs.com/bianzy/p/5822426.html</p>
<p>　　webSocket是HTML5的一种新协议，它实现了服务端与客户端的全双工通信，建立在传输层，tcp协议之上，即浏览器与服务端需要先建立tcp协议，再发送webSocket连接建立请求。</p>
<p>　　webSocket的连接：客户端发送请求信息，服务端接受到请求并返回相应的信息。连接建立。客户端发送http请求时，通过&nbsp;&nbsp;<span class="cnblogs_code">Upgrade:webSocket Connection:Upgrade</span> 告知服务器需要建立的是webSocket连接，并且还会传递webSocket版本号，协议的字版本号，原始地址，主机地址等等。</p>
<p>　　webSocket相互通信的Header很小，大概只有2Bytes。</p>
<hr />
<p>　　<em>以下是基于spring boot及支持webScoket的高版本浏览器的配置过程。</em></p>
<p><span style="font-size: 18px;">一、pom.xml中引入webSocket组件</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">dependencies</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">dependency</span><span style="color: #0000ff;">&gt;</span>
       <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">groupId</span><span style="color: #0000ff;">&gt;</span>org.springframework.boot<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">groupId</span><span style="color: #0000ff;">&gt;</span>
       <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">artifactId</span><span style="color: #0000ff;">&gt;</span>spring-boot-starter-websocket<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">artifactId</span><span style="color: #0000ff;">&gt;</span>
     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">dependency</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">dependencies</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p><span style="font-size: 18px;">二、后台引入webSocket</span></p>
<p>　　要想让一个类处理webScoket的请求，需要两个东西：</p>
<p><strong>　　</strong>①&nbsp;<strong> 类名上加webScoket请求拦截注释@ServerEndpoint(value="/***")</strong></p>
<p><strong>　　</strong>②<strong>&nbsp; 类需要继承org.springframework.web.socket.server.standard.ServerEndpointExporter，重写交互过程中各种情况下调用的方法（建立时、断开时、出错时、接收消息、发送消息）</strong></p>
<p>　　针对②，一方面根据spring的IOC特性，需要反向代理，另一方面因为webSocket是一个功能而不仅仅是属于某个业务，所以应当在配置文件中声明。配置文件可以是xml文件，也可以是注释了@Configuration的类文件，根据个人喜好使用~，这里使用的是@Configuration。</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">@Configuration
</span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> ProjectConfig {
    @Bean
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> ServerEndpointExporter serverEndpointExporter() {
        </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> ServerEndpointExporter();
    }
}</span></pre>
</div>
<p>　　使用@ServerEndpoint(value="/***") 时会自动注入返回类型为ServerEndpointExporter的bean。等同于继承了ServerEndpointExporter类。继承类后再重写<strong>onOpen、onClose、onMessage、onError</strong>方法，因为不是直接使用继承，所以方法的重写也需要使用注释，代码如下</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">package</span><span style="color: #000000;"> com.example.SpringBootTry.controller.webSocket;

</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.IOException;
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.concurrent.CopyOnWriteArraySet;

</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> javax.websocket.OnClose;
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> javax.websocket.OnError;
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> javax.websocket.OnMessage;
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> javax.websocket.OnOpen;
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> javax.websocket.Session;
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> javax.websocket.server.ServerEndpoint;

</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> org.springframework.stereotype.Component;

</span><span style="color: #008000;">/**</span><span style="color: #008000;">
 * 双工通信websocket工具类
 * </span><span style="color: #808080;">@author</span><span style="color: #008000;"> wwl
 *
 </span><span style="color: #008000;">*/</span><span style="color: #000000;">
@ServerEndpoint(value</span>="/webSocket"<span style="color: #000000;">)
@Component
</span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> WebSocketUtil{
    </span><span style="color: #008000;">//</span><span style="color: #008000;">静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。</span>
    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">int</span> onlineCount = 0<span style="color: #000000;">;

    </span><span style="color: #008000;">//</span><span style="color: #008000;">concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。</span>
    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> CopyOnWriteArraySet&lt;WebSocketUtil&gt; webSocketSet = <span style="color: #0000ff;">new</span> CopyOnWriteArraySet&lt;WebSocketUtil&gt;<span style="color: #000000;">();

    </span><span style="color: #008000;">//</span><span style="color: #008000;">与某个客户端的连接会话，需要通过它来给客户端发送数据</span>
    <span style="color: #0000ff;">private</span><span style="color: #000000;"> Session session;

    </span><span style="color: #008000;">/**</span><span style="color: #008000;">
     * 连接建立成功调用的方法</span><span style="color: #008000;">*/</span><span style="color: #000000;">
    @OnOpen
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onOpen(Session session) {
        </span><span style="color: #0000ff;">this</span>.session =<span style="color: #000000;"> session;
        webSocketSet.add(</span><span style="color: #0000ff;">this</span>);     <span style="color: #008000;">//</span><span style="color: #008000;">加入set中</span>
        addOnlineCount();           <span style="color: #008000;">//</span><span style="color: #008000;">在线数加1</span>
        System.out.println("有新连接加入！当前在线人数为" +<span style="color: #000000;"> getOnlineCount());
        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            sendMessage(</span>"您是第" + getOnlineCount() + "个双工通信的用户！"<span style="color: #000000;">);
        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {
            System.out.println(</span>"IO异常"<span style="color: #000000;">);
        }
    }

    </span><span style="color: #008000;">/**</span><span style="color: #008000;">
     * 连接关闭调用的方法
     </span><span style="color: #008000;">*/</span><span style="color: #000000;">
    @OnClose
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClose() {
        webSocketSet.remove(</span><span style="color: #0000ff;">this</span>);  <span style="color: #008000;">//</span><span style="color: #008000;">从set中删除</span>
        subOnlineCount();           <span style="color: #008000;">//</span><span style="color: #008000;">在线数减1</span>
        System.out.println("有一连接关闭！当前在线人数为" +<span style="color: #000000;"> getOnlineCount());
    }

    </span><span style="color: #008000;">/**</span><span style="color: #008000;">
     * 收到客户端消息后调用的方法
     *
     * </span><span style="color: #808080;">@param</span><span style="color: #008000;"> message 客户端发送过来的消息</span><span style="color: #008000;">*/</span><span style="color: #000000;">
    @OnMessage
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onMessage(String message, Session session) {
        System.out.println(</span>"来自客户端的消息:" +<span style="color: #000000;"> message);
        </span><span style="color: #008000;">//</span><span style="color: #008000;">发送消息</span>
        <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            session.getBasicRemote().sendText(message);
        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {
            e.printStackTrace();
        }
    }

    </span><span style="color: #008000;">/**</span><span style="color: #008000;">
     * 发生错误时调用
     </span><span style="color: #008000;">*/</span><span style="color: #000000;">
    @OnError
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onError(Session session, Throwable error) {
        System.out.println(</span>"发生错误"<span style="color: #000000;">);
        error.printStackTrace();
    }

    </span><span style="color: #008000;">/**</span><span style="color: #008000;">
     * 发送消息
     * </span><span style="color: #808080;">@param</span><span style="color: #008000;"> message
     * </span><span style="color: #808080;">@throws</span><span style="color: #008000;"> IOException
     </span><span style="color: #008000;">*/</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> sendMessage(String message) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> IOException {
        </span><span style="color: #0000ff;">this</span><span style="color: #000000;">.session.getBasicRemote().sendText(message);
        </span><span style="color: #008000;">//</span><span style="color: #008000;">this.session.getAsyncRemote().sendText(message);</span>
<span style="color: #000000;">    }


    </span><span style="color: #008000;">/**</span><span style="color: #008000;">
     * 群发自定义消息
     * </span><span style="color: #008000;">*/</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> sendInfo(String message) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> IOException {
        </span><span style="color: #0000ff;">for</span><span style="color: #000000;"> (WebSocketUtil item : webSocketSet) {
            </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
                item.sendMessage(message);
            } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {
                </span><span style="color: #0000ff;">continue</span><span style="color: #000000;">;
            }
        }
    }

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">synchronized</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> getOnlineCount() {
        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> onlineCount;
    }

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">synchronized</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> addOnlineCount() {
        WebSocketUtil.onlineCount</span>++<span style="color: #000000;">;
    }

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">synchronized</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> subOnlineCount() {
        WebSocketUtil.onlineCount</span>--<span style="color: #000000;">;
    }
}</span></pre>
</div>
<p>&nbsp;<span style="font-size: 18px;">三、前端引入webSocket</span></p>
<p>　　使用&nbsp; <span class="cnblogs_code">var websocket = <span style="color: #0000ff;">new</span> WebSocket("ws://localhost:8081/***")</span>&nbsp; 建立webSocket连接，定义websocket的onerror、onopen、onmessage、onclose的属性，跟后台的四个方法相对应，完成合理的webSocket交互。</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">&lt;!</span><span style="color: #ff00ff;">DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;</span>websocket测试页面<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;</span>    
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">meta </span><span style="color: #ff0000;">http-equiv</span><span style="color: #0000ff;">="keywords"</span><span style="color: #ff0000;"> content</span><span style="color: #0000ff;">="websocket,例子"</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">meta </span><span style="color: #ff0000;">http-equiv</span><span style="color: #0000ff;">="description"</span><span style="color: #ff0000;"> content</span><span style="color: #0000ff;">="测试websocket"</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">meta </span><span style="color: #ff0000;">http-equiv</span><span style="color: #0000ff;">="content-type"</span><span style="color: #ff0000;"> content</span><span style="color: #0000ff;">="text/html; charset=UTF-8"</span><span style="color: #0000ff;">&gt;</span> 
    <span style="color: #008000;">&lt;!--</span><span style="color: #008000;">&lt;link rel="stylesheet" type="text/css" href="./styles.css"&gt;</span><span style="color: #008000;">--&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">
    Welcome</span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">br</span><span style="color: #0000ff;">/&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">input </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="text"</span><span style="color: #ff0000;"> type</span><span style="color: #0000ff;">="text"</span> <span style="color: #0000ff;">/&gt;&lt;</span><span style="color: #800000;">button </span><span style="color: #ff0000;">onclick</span><span style="color: #0000ff;">="send()"</span><span style="color: #0000ff;">&gt;</span>Send<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">button</span><span style="color: #0000ff;">&gt;</span>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">button </span><span style="color: #ff0000;">onclick</span><span style="color: #0000ff;">="closeWebSocket()"</span><span style="color: #0000ff;">&gt;</span>Close<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">button</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="message"</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>    
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">="text/javascript"</span><span style="color: #0000ff;">&gt;</span>
    <span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> websocket </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #0000ff;">null</span><span style="background-color: #f5f5f5; color: #000000;">;

    </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">判断当前浏览器是否支持WebSocket</span>
    <span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">WebSocket</span><span style="background-color: #f5f5f5; color: #000000;">'</span> <span style="background-color: #f5f5f5; color: #0000ff;">in</span><span style="background-color: #f5f5f5; color: #000000;"> window){
        websocket </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #0000ff;">new</span><span style="background-color: #f5f5f5; color: #000000;"> WebSocket(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">ws://localhost:8081/webSocket</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">);
    }</span><span style="background-color: #f5f5f5; color: #0000ff;">else</span><span style="background-color: #f5f5f5; color: #000000;">{
        alert(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">Not support websocket</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">)
    }

    </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">连接发生错误的回调方法</span>
<span style="background-color: #f5f5f5; color: #000000;">    websocket.onerror </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;">(){
        setMessageInnerHTML(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">error</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">);
    };

    </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">连接成功建立的回调方法</span>
<span style="background-color: #f5f5f5; color: #000000;">    websocket.onopen </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;">(event){
        setMessageInnerHTML(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">open</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">);
    }

    </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">接收到消息的回调方法</span>
<span style="background-color: #f5f5f5; color: #000000;">    websocket.onmessage </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;">(event){
        setMessageInnerHTML(event.data);
    }

    </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">连接关闭的回调方法</span>
<span style="background-color: #f5f5f5; color: #000000;">    websocket.onclose </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;">(){ 
        setMessageInnerHTML(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">close</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">);
    }

    </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。</span>
<span style="background-color: #f5f5f5; color: #000000;">    window.onbeforeunload </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;">(){
        websocket.close();
    }

    </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">将消息显示在网页上</span>
    <span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;"> setMessageInnerHTML(innerHTML){
        document.getElementById(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">message</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">).innerHTML </span><span style="background-color: #f5f5f5; color: #000000;">+=</span><span style="background-color: #f5f5f5; color: #000000;"> innerHTML </span><span style="background-color: #f5f5f5; color: #000000;">+</span> <span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">&lt;br/&gt;</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">;
    }

    </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">关闭连接</span>
    <span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;"> closeWebSocket(){
        websocket.close();
    }

    </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">发送消息</span>
    <span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;"> send(){
        </span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> message </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> document.getElementById(</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">text</span><span style="background-color: #f5f5f5; color: #000000;">'</span><span style="background-color: #f5f5f5; color: #000000;">).value;
        websocket.send(message);
    }
</span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<hr />
<p>以上为spring boot 整合webSocket的一些入门知识。有错误欢迎指正。</p>
<p>demo地址：<a href="https://github.com/ttjsndx/someDemo/blob/master/SpringBootTryDemo.rar" target="_blank">https://github.com/ttjsndx/someDemo/blob/master/SpringBootTryDemo.rar</a></p>
<p>&nbsp;</p>]]></description></item><item><title>左中右布局的五种实现方式</title><link>http://www.cnblogs.com/ttjsndx/archive/2018/07/04/9265811.html</link><dc:creator>有营养的yyl</dc:creator><author>有营养的yyl</author><pubDate>Wed, 04 Jul 2018 14:44:00 GMT</pubDate><guid>http://www.cnblogs.com/ttjsndx/archive/2018/07/04/9265811.html</guid><description><![CDATA[<p>　　总结前端知识点后的随笔...</p>
<p>　　<strong><span style="font-size: 14pt;">页面样式</span></strong></p>
<p>　　<img src="https://images2018.cnblogs.com/blog/1291030/201807/1291030-20180704224749914-810898146.png" alt="" /></p>
<p>　　<strong><span style="font-size: 14pt;">页面代码</span></strong></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">&lt;!</span><span style="color: #ff00ff;">DOCTYPE html</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">style </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">="text/css"</span><span style="color: #0000ff;">&gt;</span><span style="background-color: #f5f5f5; color: #800000;">
        *</span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
            margin</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">0px</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
            border</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 0px</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
            box-sizing</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">border-box</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
        <span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">
        div</span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
            border</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 1px solid black</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
        <span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">
        .left</span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
            height</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 100px</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
            width</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 100px</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
            background-color</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> red</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
        <span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">
        .right</span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
            height</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 100px</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
            width</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 100px</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
            background-color</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> blue</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
        <span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">
        .center</span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
            height</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 100px</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
        <span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">

        .floatDiv .left</span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
            float</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> left</span><span style="background-color: #f5f5f5; color: #000000;">;</span>            
        <span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">
        .floatDiv .right</span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
            float</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> right</span><span style="background-color: #f5f5f5; color: #000000;">;</span>            
        <span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">
        .floatDiv .center</span><span style="background-color: #f5f5f5; color: #000000;">{</span>

        <span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">
        
        .positionDiv .left</span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
            position</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> absolute</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
            left</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 0px</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
        <span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">
        .positionDiv .right</span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
            position</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> absolute</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
            right</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 0px</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
        <span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">
        .positionDiv .center</span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
            margin-left</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 100px</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
            margin-right</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 100px</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
        <span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">

        .tableDiv</span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
            display</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> table</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
            width</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">100%</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
        <span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">
        .tableDiv .left</span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
            display</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> table-cell</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
        <span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">
        .tableDiv .right</span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
            display</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> table-cell</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
        <span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">
        .tableDiv .center</span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
            display</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> table-cell</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
        <span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">

        .flexDiv</span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
            display</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">flex</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
        <span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">
        .flexDiv .left</span><span style="background-color: #f5f5f5; color: #000000;">{</span>
            
        <span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">
        .flexDiv .right</span><span style="background-color: #f5f5f5; color: #000000;">{</span>
            
        <span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">
        .flexDiv .center</span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
            flex</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">1</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
        <span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">

        .gridDiv</span><span style="background-color: #f5f5f5; color: #000000;">{</span><span style="background-color: #f5f5f5; color: #ff0000;">
            display</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> grid</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
            width</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 100%</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
            grid-template-rows</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">100px</span><span style="background-color: #f5f5f5; color: #000000;">;</span><span style="background-color: #f5f5f5; color: #ff0000;">
            grid-template-columns</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">100px auto 100px</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
        <span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">
        .gridDiv .left</span><span style="background-color: #f5f5f5; color: #000000;">{</span>
            
        <span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">
        .gridDiv .right</span><span style="background-color: #f5f5f5; color: #000000;">{</span>
            
        <span style="background-color: #f5f5f5; color: #000000;">}</span><span style="background-color: #f5f5f5; color: #800000;">
        .gridDiv .center</span><span style="background-color: #f5f5f5; color: #000000;">{</span>

        <span style="background-color: #f5f5f5; color: #000000;">}</span>

    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">style</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">h1</span><span style="color: #0000ff;">&gt;</span>float实现布局<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">h1</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="floatDiv"</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="left"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="right"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="center"</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">
            float布局时，居中的div必须要放在最后。居中的div的模型宽度为整个页面，但是展示的时候会在可视范围内展示。即不会展示大屏居左或者居右的div下面。
            </span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">strong</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">
                因为float的初衷是实现文字环绕图片
            </span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">strong</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">
            ，当我们缩小浏览器的宽度时，会发现文字会环绕在居左和居右的div周围。
        </span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">br</span><span style="color: #0000ff;">/&gt;&lt;</span><span style="color: #800000;">br</span><span style="color: #0000ff;">/&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">h1</span><span style="color: #0000ff;">&gt;</span>position实现布局<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">h1</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="positionDiv"</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="left"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>        
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="right"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="center"</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">
            position布局时，居中的div必须放到最后。
            </span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">strong</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">
                与float不同的事，文字会被左右的div遮盖
            </span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">strong</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">
            ，所以需要使用margin-left:100px;来调整div
        </span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>

    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">h1</span><span style="color: #0000ff;">&gt;</span>table + table-cell实现布局<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">h1</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="tableDiv"</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="left"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="center"</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">
            使用display:table实现左中右时，
            </span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">strong</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">
                居中的div必须放中间
            </span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">strong</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">
            。另外，父元素必须设置width:100%; 。并且，居中的div的宽度不再为页面的宽度
        </span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>        
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="right"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>        
    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
    
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">h1</span><span style="color: #0000ff;">&gt;</span>flex实现布局<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">h1</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="flexDiv"</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="left"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="center"</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">
            使用flex实现左中右时，居中的div设置flex:1，居中的div的宽度不再为页面的宽度
        </span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>        
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="right"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>        
    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>

    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">h1</span><span style="color: #0000ff;">&gt;</span>grid实现布局<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">h1</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="gridDiv"</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="left"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="center"</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">
            使用grid实现左中右时，网格内部的div的宽度和高度都由父标签设置！
        </span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>        
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="right"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>        
    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
    
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>&nbsp;</p>]]></description></item><item><title>spring boot 常见的配置问题</title><link>http://www.cnblogs.com/ttjsndx/archive/2018/07/03/9183389.html</link><dc:creator>有营养的yyl</dc:creator><author>有营养的yyl</author><pubDate>Tue, 03 Jul 2018 09:09:00 GMT</pubDate><guid>http://www.cnblogs.com/ttjsndx/archive/2018/07/03/9183389.html</guid><description><![CDATA[<p>　　最近在自学spring boot ，新手教程网上很多，这里主要记录下配置过程中的一些疑难杂症。这些记录都是针对以下配置生成的项目</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="https://images2018.cnblogs.com/blog/1291030/201806/1291030-20180614153510482-1191972127.png" alt="" width="866" height="438" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<hr />
<p>　　<strong><span style="font-size: 18pt;">1、该项目一定要用jdk1.8</span></strong></p>
<p>　　<strong><span style="font-size: 18pt;">2、application.properties不被加载解决办法</span></strong></p>
<p>　　SpringBootTry/src/main/resources/application.properties&nbsp;的配置文件可能不会被加载。写个&nbsp;server.port=8081&nbsp;就能测试。若端口号未被修改成8081，则检查下项目的properties中&nbsp;椭圆标记的地方是不是&nbsp;写了 **，如下图</p>
<p>　　<img style="margin-right: auto; margin-left: auto; display: block;" src="https://images2018.cnblogs.com/blog/1291030/201806/1291030-20180614154143248-362167508.png" alt="" /></p>
<p>　　是的话，点击Edit&rarr;选中**&rarr;点击Remove&rarr;点击Finish，就好了。</p>
<p>　　<img style="margin-right: auto; margin-left: auto; display: block;" src="https://images2018.cnblogs.com/blog/1291030/201806/1291030-20180614154323111-780368987.png" alt="" /></p>
<p>　<span style="font-size: 18pt;"><strong>　3、各类文件的默认配置路径</strong></span></p>
<p>　　　　1）<strong>localhost:8081/</strong>对应的路径就是<strong>src/main/resources/static</strong>/，且static下的所有文件都可以直接访问。</p>
<p>　　　　2）Controller中的方法<strong>可以并且只可以</strong>直接调用static文件夹下的文件。其余路径下的文件需要通过thymeleaf或者freemarker反射访问。</p>
<p>　　　　3）通过引用thymeleaf返回视图时，只能返回src/main/webapp下的文件。且数据的装载只能通过jsp或者jstl</p>
<p>　　　　4）通过引用freemarker返回视图时，可以返回根目录下的所有的文件（<strong>classpath:/templates/</strong>）。且数据的装载支持html和jsp。所以<strong>本文章的各项内容都是针对配置freemarker的</strong>。</p>
<p>　　　　5）html中引用js，img，video文件时，可将这些文件直接放入到static中，src默认对应到static文件夹下（<strong>src="/js/testFunction.js"</strong>）。</p>
<p>　<span style="font-size: 18pt;"><strong>　4、接受和返回数据类型</strong></span></p>
<p>　　　　1）类名前设置@Controller，告知spring当前类可以接受http请求</p>
<p>　　　　2）方法名前设置@RequestMapping(value="/b",method = RequestMethod.GET)。value值对应的是请求的路径，method对应的是请求的类型，请求的类型可以不设置。</p>
<p>　　　　3）方法名的返回值前设置@ResponseBody，提醒spring当前方法返回的是数据类型，不用去匹配视图。</p>
<p>　　　　4）在类名前设置@RestController等于@Controller+@ResponseBody，该类就只能返回数据类型不能返回视图了。</p>
<p>　　　　5）@RequestMapping(value="/b/{name}"）可以匹配所有的/d/*请求，并且把*赋值给name对象。可在方法中直接调用。</p>
<p>　　　　6）请求的url上的属性值，只要与相对应的处理请求的方法的属性值命名一致，则会自动加载。</p>
<p>　　　　7）post请求传入的json类的数据，可以写一个java bean，属性名称与json的key值一一对应，即可自动装载数据到java bean 的引用变量中。</p>
<p>　　<span style="font-size: 18pt;"><strong>5、返回视图</strong></span></p>
<p>　　　　1）返回视图时，方法名的返回值前不加@ResponseBody。</p>
<p>　　　　2）返回类型使用ModelAndView，可同时返回视图和数据，方便前端控制器加载。</p>
<p>　　　　3）前端页面直接使用${"KEY"}就可以使用ModelAndView中的值</p>
<p>　<span style="font-size: 18pt;"><strong>　6、其余方法</strong></span></p>
<p>　　　　1）java bean的类名上使用@Repository(value="people")，要使用该类时，直接在类的引用变量上使用&nbsp;@Resource(name="people") ，相当于自动new了一个people对象。若不设置value值，则默认当前class类首字母小写作为引用的别名。@Resource(name="peopleT")也可以写在set方法上，更符合封装的特性。</p>
<p>&nbsp;</p>
<hr />
<p>　　<em><span style="font-size: 14pt;">上诉方法的测试项目下载地址：<a href="https://github.com/ttjsndx/someDemo/blob/master/SpringBootTryDemo.rar" target="_blank">github下载地址，点击Download就行</a></span></em></p>]]></description></item><item><title>移动端H5拍照代码实现及外网部署</title><link>http://www.cnblogs.com/ttjsndx/archive/2018/04/26/8902214.html</link><dc:creator>有营养的yyl</dc:creator><author>有营养的yyl</author><pubDate>Thu, 26 Apr 2018 02:45:00 GMT</pubDate><guid>http://www.cnblogs.com/ttjsndx/archive/2018/04/26/8902214.html</guid><description><![CDATA[<p>　　最近的工作中，遇到了一个需求：对于无APP登陆权限的人员，提供拍照上传功能，以便生成更完善的出工记录。经研究讨论，决定实现的机制为：由合法的人员登陆APP认领相关工作任务，并生成当天当工作的唯一二维码，无APP登陆权限的人员扫描二维码，使用H5页面进行自拍，完善出工记录。我负责了H5拍照及拍照信息保存部分。该部分工作独立性较强，其中也有许多难点的解决过程值得记录。所以写了这篇文章记录，并且在github中写了一个<a href="https://github.com/ttjsndx/tpf" target="_blank">demo</a>。希望能帮助到有需要的人。</p>
<p><span style="font-size: 18pt;">一：环境配置</span></p>
<p>　　简介：该demo前端使用h5+jquery，后端使用java。因为时间关系，没有保存数据库。移动端拍完照后，直接保存到了服务器本地文件夹下。</p>
<p>　　1.从<strong><a href="https://github.com/ttjsndx/tpf" target="_blank">github下载demo</a></strong>，并引入到ecplise中。</p>
<p>　　2.服务器使用tomcat，建议使用Catalina\localhost路径下新增.xml文件来配置服务，注意<strong>若xml文件有名称时，如a.xml，tpf.js 中的action请求需要需要加上/a 。否则web.xml 无法捕获相应请求</strong>。</p>
<p>　　3.文件传输需要的jar包都在lib下面，引入就行（ojdbc.jar是后续完善可能会用到的jar），另外<strong>还需要引入你tomcat的common/lib下面的jsp-api.jar 和 servlet-api.jar</strong>。</p>
<p>　　4.tpf下的xr.properties配置了文件保存根路径，这里的文件是用于ecplise上方便查看和版本管理的，<strong>真正起作用的是WEB-INF/classes下的xr.properties</strong>。布置服务时请注意替换。</p>
<p>　　5.使用tomcat直接启动服务，或者eclipse中配置tomcat，在eclipse中启动服务。服务地址&nbsp;http://localhost:8090/main/page/tpf.html （第二步中的xml文件的文件名为空时），文件保存路径为E:\tpfData1\image\年\月\日（xr.properties中配置了根路径E:\tpfData1）</p>
<p>　　6.内外网映射用了nat123。配置如下</p>
<p>　　<img src="https://images2018.cnblogs.com/blog/1291030/201805/1291030-20180501173432281-1450087679.png" alt="" /></p>
<p>　　应用类型需要选择80网站，变相的会收取30块钱费用，提供的服务大概能支持100KB的照片上传时不报文件流连接超时。内网端口和内网地址就是你本机访问服务时的地址和端口号，外网域名用他随机的就行。</p>
<p><span style="font-size: 18pt;">二：前端代码说明</span></p>
<p>　　1.调用照相机服务是通过</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">input </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">="file"</span><span style="color: #ff0000;"> name</span><span style="color: #0000ff;">="file_head"</span><span style="color: #ff0000;"> id</span><span style="color: #0000ff;">="file_head"</span><span style="color: #ff0000;"> onchange</span><span style="color: #0000ff;">="setImagePreview();"</span><span style="color: #ff0000;"> accept</span><span style="color: #0000ff;">="image/*"</span><span style="color: #ff0000;"> capture</span><span style="color: #0000ff;">="camera"</span><span style="color: #ff0000;"> style</span><span style="color: #0000ff;">="display: none"</span> <span style="color: #0000ff;">/&gt;</span></pre>
</div>
<p>属性&nbsp;<span class="cnblogs_code">capture="camera"</span> ，会让手机默认调用照相机拍照。不设置该属性的话则会让你选择拍照或从相册中选取照片。</p>
<p>属性&nbsp;<span class="cnblogs_code">onchange="setImagePreview();"</span> ，是在手机拍照后，获取照片路径并展示在页面上。（为了测试方便也支持电脑网页上传图片类型附件后展示附件）</p>
<p>　　2.提交服务是通过form表单提交的。最开始试过ajax，文件流转base64再分段传输，后台再拼接转换成文件流，不知道是编码格式问题还是分段后数据依旧过长，尝试了很久也未成功，最后还是改用了form表单提交。form表单提交后会重定向当前页面，所以设置了&nbsp;<span class="cnblogs_code">document.forms[0].target = "frameFile";</span> ，将重定向页面指向了一个隐藏的iframe。监听iframe重定位完成状态，并给出提醒。</p>
<p>　　3.为了页面优化，隐藏了&rdquo;朴素的&ldquo;的file标签，改用自定义的图片，再在js中调用file标签。</p>
<p>　　4.浏览器自带的alert，会显示用户的IP信息，故使用调用common.js中的changeAlert() 方法，隐藏掉了这个IP显示（不适用与IE）。</p>
<p>　　5.checkDate() 方法是用于验证url上的参数是否合法，合法后再加载页面监听事件。该功能暂时未实现，故直接加载了监听事件。</p>
<p><span style="font-size: 18pt;">三：后台代码说明</span></p>
<p>　　1.文件上传主处理类是UploadFileServlet，该类接受了文件流及基本的数据。另外，该类也获取了请求的ip地址，并将这些数据传给了了特点的文件处理类。</p>
<p>　　2.特定的文件处理类是配在js中，该类需要实现了接口UploadFileInterface。获取xr.properties中文件保存的根目录，以及通过当前的时间设置更详细的文件路径，将文件流保存到该文件路径下。</p>
<p>　　3.文件加间的斜杠方向通过&nbsp;&nbsp;<span class="cnblogs_code">System.getProperty("file.separator")</span> 获取，因为windows和linux的文件路径书写方式略有不同。</p>
<hr />
<p>以上就是该demo中各个文件的功能以及部署的过程。欢迎指正及讨论。转载请注明出处。</p>
<p>　　</p>
<p>　　</p>
<p>&nbsp;</p>
<p>　　</p>]]></description></item><item><title>JAVA数据库操作回滚小结</title><link>http://www.cnblogs.com/ttjsndx/archive/2018/04/02/8687417.html</link><dc:creator>有营养的yyl</dc:creator><author>有营养的yyl</author><pubDate>Mon, 02 Apr 2018 04:48:00 GMT</pubDate><guid>http://www.cnblogs.com/ttjsndx/archive/2018/04/02/8687417.html</guid><description><![CDATA[<p><strong>一：总结的原因</strong></p>
<p>　　在最近的工作中，遇到了一个一对多关系多表数据传输，传送成功状态绑定在主数据表上，因为代码不健壮问题造成了主表传送状态更新失败，而子表数据就被重复插入。又由于数据传输频率很高，我们的测试环境就像被官方病毒攻击，疯狂插入了几十个G的数据&hellip;&hellip;</p>
<p><strong>二：解决步骤</strong></p>
<p>　　1.提高代码健壮性，先进行主表状态能否成功更新判断，再插入子表数据，最后再更新主表状态。</p>
<p>　　2.进一步提高容错率：将这些存在关系的表的更新集成到一个事物，全部更新都正常执行后，再提交事务。</p>
<p><strong>三：技术实现</strong></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> doManipulateData(){
    Connection connection </span>= getConnection();<span style="color: #008000;">//</span><span style="color: #008000;">获取当前环境的连接</span>
    <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
        connection.setAutoCommit(</span><span style="color: #0000ff;">false</span>);<span style="color: #008000;">//</span><span style="color: #008000;">设置不能自动提交
        </span><span style="color: #008000;">//</span><span style="color: #008000;">1.执行普通的增删改查语句</span>
<span style="color: #000000;">        doADUS(connection);
        </span><span style="color: #008000;">//</span><span style="color: #008000;">2.执行存储过程</span>
<span style="color: #000000;">        doStoredPro(connection);
        connection.commit(); </span><span style="color: #008000;">//</span><span style="color: #008000;">手动提交</span>
        connection.setAutoCommit(<span style="color: #0000ff;">true</span>);<span style="color: #008000;">//</span><span style="color: #008000;">设置可以自动提交</span>
    } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (SQLException e) {
        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            connection.rollback(); </span><span style="color: #008000;">//</span><span style="color: #008000;">回滚此次链接的所有操作</span>
            connection.setAutoCommit(<span style="color: #0000ff;">true</span>); <span style="color: #008000;">//</span><span style="color: #008000;">设置可以自动提交</span>
        } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (SQLException e1) {
            e1.printStackTrace();
        }
    } </span><span style="color: #0000ff;">finally</span><span style="color: #000000;"> {
        connection.close();</span><span style="color: #008000;">//</span><span style="color: #008000;">关闭连接</span>
<span style="color: #000000;">    }
}

</span><span style="color: #008000;">/*</span><span style="color: #008000;">
 * 执行普通的增删改查语句
 </span><span style="color: #008000;">*/</span>
<span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> doADUS(Connection connection) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> Exception{
    String sql </span>= "..."<span style="color: #000000;">;
    PreparedStatement ps </span>= <span style="color: #0000ff;">null</span><span style="color: #000000;">;
    </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
        ps </span>=<span style="color: #000000;"> connection.prepareStatement(sql);
        ps.setString(</span>1, appId);  <span style="color: #008000;">//</span><span style="color: #008000;">ps.setBinaryStream(2, arg1, arg2)</span>
<span style="color: #000000;">        ps.executeUpdate();
    } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (SQLException e) {
        </span><span style="color: #0000ff;">throw</span><span style="color: #000000;"> e;
    } </span><span style="color: #0000ff;">finally</span><span style="color: #000000;"> {
        ps.close();
    }
}

</span><span style="color: #008000;">/*</span><span style="color: #008000;">
 * 执行存储过程
 </span><span style="color: #008000;">*/</span>
<span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> doStoredPro(Connection connection) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> Exception{
    CallableStatement cs </span>= <span style="color: #0000ff;">null</span><span style="color: #000000;">;
    </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
        cs </span>= connection.prepareCall("{call 过程名称(?,?)}"<span style="color: #000000;">);
        cs.setString(</span>1, ""<span style="color: #000000;">);
        cs.registerOutParameter(</span>2, Types.INTEGER);<span style="color: #008000;">//</span><span style="color: #008000;">存储过程执行返回数据</span>
<span style="color: #000000;">        cs.execute();
        </span><span style="color: #0000ff;">if</span> (cs.getInt(2) != 0<span style="color: #000000;">) {
            </span><span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> Exception("存储过程执行失败！"<span style="color: #000000;">);
        }
    } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {
        </span><span style="color: #0000ff;">throw</span><span style="color: #000000;"> e;
    } </span><span style="color: #0000ff;">finally</span><span style="color: #000000;"> {
        ps.close();
    }
}</span></pre>
</div>
<p><strong>&nbsp;四：注意事项</strong></p>
<p>　　1.java.sql.PreparedStatement.setBinaryStream(int parameterIndex, InputStream x,<strong>&nbsp;long</strong> length)&nbsp;方法，jdbc并没有提供相应的接口，运行时会报错。需要使用&nbsp;java.sql.PreparedStatement.setBinaryStream(int parameterIndex,&nbsp;InputStream&nbsp;x,&nbsp;<strong>int</strong> length)</p>
<p>　　2.PreparedStatement&nbsp;建立的sql对象只编译一次，可使用占位符安全的插入。Statement每次执行sql时都会重新编译一次sql，不能使用占位符</p>]]></description></item><item><title>JS实现大整数乘法（性能优化、正负整数）</title><link>http://www.cnblogs.com/ttjsndx/archive/2018/03/12/8549659.html</link><dc:creator>有营养的yyl</dc:creator><author>有营养的yyl</author><pubDate>Mon, 12 Mar 2018 07:44:00 GMT</pubDate><guid>http://www.cnblogs.com/ttjsndx/archive/2018/03/12/8549659.html</guid><description><![CDATA[<p><span style="font-size: 18px;"><span style="color: #008080;"><span style="color: #000000;"><span style="font-size: 16px;">本方法的思路为：</span></span></span></span></p>
<p><span style="font-size: 18px;"><span style="color: #008080;"><span style="color: #000000;"><span style="font-size: 16px;">　　一：检查了输入的合法性（非空，无非法字符）</span><span style="font-size: 16px;"><br /></span></span></span></span></p>
<p><span style="font-size: 18px;"><span style="color: #008080;"><span style="color: #000000;"><span style="font-size: 16px;">　　二：检查输入是否可以进行简单计算（一个数为 0，1，+1，-1）</span></span></span></span></p>
<p><span style="font-size: 18px;"><span style="color: #008080;"><span style="color: #000000;"><span style="font-size: 16px;">　　三：去掉输入最前面可能有的正负符号，并判断输出的正负</span></span></span></span></p>
<p><span style="font-size: 18px;"><span style="color: #008080;"><span style="color: #000000;"><span style="font-size: 16px;">　　四：将输入的值分成4位一截（分的长度太短，性能太差，长度太长，精度容易降低）</span></span></span></span></p>
<p><span style="font-size: 18px;"><span style="color: #008080;"><span style="color: #000000;"><span style="font-size: 16px;">　　五：遍历相乘得到最终数组（这里用了递归）</span></span></span></span></p>
<p><span style="font-size: 18px;"><span style="color: #008080;"><span style="color: #000000;"><span style="font-size: 16px;">　　六：遍历最终数组，拼接最终的数（不建议用join,因为数组中的元素可能小于四位，拼接时会丢失0）</span></span></span></span></p>
<p><span style="font-size: 18px;"><span style="color: #008080;"><span style="color: #000000;"><span style="font-size: 16px;">　　七：将正负符号与最终的数拼接输出</span></span></span></span></p>
<p><span style="font-size: 16px;">代码如下：</span></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">&lt;!</span><span style="color: #ff00ff;">DOCTYPE html</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">="text/javascript"</span><span style="color: #0000ff;">&gt;</span>
        <span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> num1 </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #000000;">""</span><span style="background-color: #f5f5f5; color: #000000;">;
        </span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> num2 </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #000000;">""</span><span style="background-color: #f5f5f5; color: #000000;">;
        </span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> finallyArr;
        </span><span style="background-color: #f5f5f5; color: #008000;">/*</span><span style="background-color: #f5f5f5; color: #008000;">
         * 有两个用字符表示的非常大的大整数，算出他们的乘积，也是用字符串表示，不能用系统自带的大整数类型。
         * 输入例子72106547548473106236 982161082972751393
         * 输出例子70820244829634538040848656466105986748
                    70820244829634538040848656466105986748
         </span><span style="background-color: #f5f5f5; color: #008000;">*/</span>
        <span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;"> getResult(){
            finallyArr </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #0000ff;">new</span><span style="background-color: #f5f5f5; color: #000000;"> Array();
             num1 </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> document.getElementById(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">num1</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">).value;
             num2 </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> document.getElementById(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">num2</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">).value;         
             </span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(</span><span style="background-color: #f5f5f5; color: #000000;">!</span><span style="background-color: #f5f5f5; color: #000000;">checkNum(num1)){
                 alert(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">输入:num1 不合法！</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">);
                 </span><span style="background-color: #f5f5f5; color: #0000ff;">return</span><span style="background-color: #f5f5f5; color: #000000;">;
             }
             </span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(</span><span style="background-color: #f5f5f5; color: #000000;">!</span><span style="background-color: #f5f5f5; color: #000000;">checkNum(num2)){
                 alert(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">输入:num2 不合法！</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">);
                 </span><span style="background-color: #f5f5f5; color: #0000ff;">return</span><span style="background-color: #f5f5f5; color: #000000;">;
             }
             </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">特殊情况的简单算法</span>
             <span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(doSimpleWay()){
                 </span><span style="background-color: #f5f5f5; color: #0000ff;">return</span><span style="background-color: #f5f5f5; color: #000000;">;
             }
             
             </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">获取最终值的正负符号</span>
             <span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> symbol </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> initSymbol();
             
             </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">将输入的值分成4位一小截的数组</span>
             <span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> numArr1 </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> getNumArr(num1,</span><span style="background-color: #f5f5f5; color: #0000ff;">new</span><span style="background-color: #f5f5f5; color: #000000;"> Array());
             </span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> numArr2 </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> getNumArr(num2,</span><span style="background-color: #f5f5f5; color: #0000ff;">new</span><span style="background-color: #f5f5f5; color: #000000;"> Array());
             
             </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">遍历相乘相加得到最终的数组</span>
             <span style="background-color: #f5f5f5; color: #0000ff;">for</span><span style="background-color: #f5f5f5; color: #000000;">(</span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> i </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">; i </span><span style="background-color: #f5f5f5; color: #000000;">&lt;</span><span style="background-color: #f5f5f5; color: #000000;"> numArr1.length; i</span><span style="background-color: #f5f5f5; color: #000000;">++</span><span style="background-color: #f5f5f5; color: #000000;">){
                 </span><span style="background-color: #f5f5f5; color: #0000ff;">for</span><span style="background-color: #f5f5f5; color: #000000;">(</span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> j </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">; j </span><span style="background-color: #f5f5f5; color: #000000;">&lt;</span><span style="background-color: #f5f5f5; color: #000000;"> numArr2.length; j</span><span style="background-color: #f5f5f5; color: #000000;">++</span><span style="background-color: #f5f5f5; color: #000000;">){
                     updateFinallyArr(i </span><span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;"> j , numArr1[i] </span><span style="background-color: #f5f5f5; color: #000000;">*</span><span style="background-color: #f5f5f5; color: #000000;"> numArr2[j]);                     
                 }
             }
             </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">倒序遍历数组获取最终结果</span>
             <span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> resultStr </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> finallyArr.pop();
             </span><span style="background-color: #f5f5f5; color: #0000ff;">for</span><span style="background-color: #f5f5f5; color: #000000;">(</span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> i </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> finallyArr.length; i </span><span style="background-color: #f5f5f5; color: #000000;">&gt;=</span> <span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">; i</span><span style="background-color: #f5f5f5; color: #000000;">--</span><span style="background-color: #f5f5f5; color: #000000;">){
                 </span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(finallyArr[i] </span><span style="background-color: #f5f5f5; color: #000000;">&gt;=</span> <span style="background-color: #f5f5f5; color: #000000;">1000</span><span style="background-color: #f5f5f5; color: #000000;">){
                     resultStr </span><span style="background-color: #f5f5f5; color: #000000;">+=</span>  <span style="background-color: #f5f5f5; color: #000000;">""</span> <span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;"> finallyArr[i];
                 }</span><span style="background-color: #f5f5f5; color: #0000ff;">else</span> <span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(finallyArr[i] </span><span style="background-color: #f5f5f5; color: #000000;">&lt;</span> <span style="background-color: #f5f5f5; color: #000000;">1000</span><span style="background-color: #f5f5f5; color: #000000;">){
                     resultStr </span><span style="background-color: #f5f5f5; color: #000000;">+=</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">"</span> <span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;"> finallyArr[i];
                 }</span><span style="background-color: #f5f5f5; color: #0000ff;">else</span> <span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(finallyArr[i] </span><span style="background-color: #f5f5f5; color: #000000;">&lt;</span> <span style="background-color: #f5f5f5; color: #000000;">100</span><span style="background-color: #f5f5f5; color: #000000;">){
                     resultStr </span><span style="background-color: #f5f5f5; color: #000000;">+=</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">00</span><span style="background-color: #f5f5f5; color: #000000;">"</span> <span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;"> finallyArr[i];
                 }</span><span style="background-color: #f5f5f5; color: #0000ff;">else</span> <span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(finallyArr[i] </span><span style="background-color: #f5f5f5; color: #000000;">&lt;</span> <span style="background-color: #f5f5f5; color: #000000;">10</span><span style="background-color: #f5f5f5; color: #000000;">){
                     resultStr </span><span style="background-color: #f5f5f5; color: #000000;">+=</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">000</span><span style="background-color: #f5f5f5; color: #000000;">"</span> <span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;"> finallyArr[i];
                 }</span><span style="background-color: #f5f5f5; color: #0000ff;">else</span> <span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(finallyArr[i] </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">){
                     resultStr </span><span style="background-color: #f5f5f5; color: #000000;">+=</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">0000</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">;
                 }
             }
             document.getElementById(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">RESULT</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">).innerText </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> symbol </span><span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;"> resultStr;
        }

        </span><span style="background-color: #f5f5f5; color: #008000;">/*</span><span style="background-color: #f5f5f5; color: #008000;">*
         * 根据数值以及数值的位置更新最终的数组
         </span><span style="background-color: #f5f5f5; color: #008000;">*/</span>
        <span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;"> updateFinallyArr(i , num){
            </span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> old </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> finallyArr[i];
            </span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(old){
                num </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> num </span><span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;"> old;
            }
            </span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(num </span><span style="background-color: #f5f5f5; color: #000000;">&gt;</span> <span style="background-color: #f5f5f5; color: #000000;">9999</span><span style="background-color: #f5f5f5; color: #000000;">){
                finallyArr[i] </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> num </span><span style="background-color: #f5f5f5; color: #000000;">%</span> <span style="background-color: #f5f5f5; color: #000000;">10000</span><span style="background-color: #f5f5f5; color: #000000;">;
                updateFinallyArr(i </span><span style="background-color: #f5f5f5; color: #000000;">+</span> <span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;"> , Math.floor(num</span><span style="background-color: #f5f5f5; color: #000000;">/</span><span style="background-color: #f5f5f5; color: #000000;">10000) );</span>
<span style="background-color: #f5f5f5; color: #000000;">            }</span><span style="background-color: #f5f5f5; color: #0000ff;">else</span><span style="background-color: #f5f5f5; color: #000000;">{
                finallyArr[i] </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> num;
            }

        }

        </span><span style="background-color: #f5f5f5; color: #008000;">/*</span><span style="background-color: #f5f5f5; color: #008000;">*
         * 处理输入字符串的正负号，并判断最终值的正负号
         </span><span style="background-color: #f5f5f5; color: #008000;">*/</span>
        <span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;"> initSymbol(){
            </span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(num1.substring(</span><span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">,</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">) </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">-</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">){
                 num1 </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> num1.substring(</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">,num1.length); 
                 </span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(num2.substring(</span><span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">,</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">) </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">-</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">){
                     num2 </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> num2.substring(</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">,num2.length);
                 }</span><span style="background-color: #f5f5f5; color: #0000ff;">else</span> <span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(num2.substring(</span><span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">,</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">) </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">){
                     num2 </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> num2.substring(</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">,num2.length);
                     </span><span style="background-color: #f5f5f5; color: #0000ff;">return</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">-</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">;
                 }</span><span style="background-color: #f5f5f5; color: #0000ff;">else</span><span style="background-color: #f5f5f5; color: #000000;">{
                     </span><span style="background-color: #f5f5f5; color: #0000ff;">return</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">-</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">;
                 }
             }</span><span style="background-color: #f5f5f5; color: #0000ff;">else</span> <span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(num1.substring(</span><span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">,</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">) </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">){
                 num1 </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> num1.substring(</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">,num1.length); 
                 </span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(num2.substring(</span><span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">,</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">) </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">-</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">){
                     num2 </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> num2.substring(</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">,num2.length);
                     </span><span style="background-color: #f5f5f5; color: #0000ff;">return</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">-</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">;
                 }</span><span style="background-color: #f5f5f5; color: #0000ff;">else</span> <span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(num2.substring(</span><span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">,</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">) </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">){
                     num2 </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> num2.substring(</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">,num2.length); 
                 }
             }
             </span><span style="background-color: #f5f5f5; color: #0000ff;">return</span> <span style="background-color: #f5f5f5; color: #000000;">""</span><span style="background-color: #f5f5f5; color: #000000;">;
        }

        </span><span style="background-color: #f5f5f5; color: #008000;">/*</span><span style="background-color: #f5f5f5; color: #008000;">*
         * 特殊情况的简单算法
         </span><span style="background-color: #f5f5f5; color: #008000;">*/</span>
        <span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;"> doSimpleWay(){
            </span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(num1 </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">"</span> <span style="background-color: #f5f5f5; color: #000000;">||</span><span style="background-color: #f5f5f5; color: #000000;"> num2 </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">){
                document.getElementById(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">RESULT</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">).innerText </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">;
                 </span><span style="background-color: #f5f5f5; color: #0000ff;">return</span> <span style="background-color: #f5f5f5; color: #0000ff;">true</span><span style="background-color: #f5f5f5; color: #000000;">;
             }</span><span style="background-color: #f5f5f5; color: #0000ff;">else</span> <span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(num1 </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">"</span> <span style="background-color: #f5f5f5; color: #000000;">||</span><span style="background-color: #f5f5f5; color: #000000;"> num1 </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">+1</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">){
                 document.getElementById(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">RESULT</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">).innerText </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> num2;
                 </span><span style="background-color: #f5f5f5; color: #0000ff;">return</span> <span style="background-color: #f5f5f5; color: #0000ff;">true</span><span style="background-color: #f5f5f5; color: #000000;">;
             }</span><span style="background-color: #f5f5f5; color: #0000ff;">else</span> <span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(num2 </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">"</span> <span style="background-color: #f5f5f5; color: #000000;">||</span><span style="background-color: #f5f5f5; color: #000000;"> num2 </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">+1</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">){
                 document.getElementById(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">RESULT</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">).innerText </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> num1;
                 </span><span style="background-color: #f5f5f5; color: #0000ff;">return</span> <span style="background-color: #f5f5f5; color: #0000ff;">true</span><span style="background-color: #f5f5f5; color: #000000;">;
             }</span><span style="background-color: #f5f5f5; color: #0000ff;">else</span> <span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(num1 </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">-1</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">){
                 </span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(num2.substring(</span><span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">,</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">) </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">-</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;"> ){
                     document.getElementById(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">RESULT</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">).innerText </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> num2.substring(</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">,num2.length);
                 }</span><span style="background-color: #f5f5f5; color: #0000ff;">else</span> <span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(num2.substring(</span><span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">,</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">) </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;"> ){
                     document.getElementById(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">RESULT</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">).innerText </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">-</span><span style="background-color: #f5f5f5; color: #000000;">"</span> <span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;"> num2.substring(</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">,num2.length);
                 }</span><span style="background-color: #f5f5f5; color: #0000ff;">else</span><span style="background-color: #f5f5f5; color: #000000;">{
                     document.getElementById(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">RESULT</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">).innerText </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">-</span><span style="background-color: #f5f5f5; color: #000000;">"</span> <span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;"> num2;
                 }
                 </span><span style="background-color: #f5f5f5; color: #0000ff;">return</span> <span style="background-color: #f5f5f5; color: #0000ff;">true</span><span style="background-color: #f5f5f5; color: #000000;">;
             }</span><span style="background-color: #f5f5f5; color: #0000ff;">else</span> <span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(num2 </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">-1</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">){
                 </span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(num1.substring(</span><span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">,</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">) </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">-</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;"> ){
                     document.getElementById(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">RESULT</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">).innerText </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> num1.substring(</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">,num1.length);
                 }</span><span style="background-color: #f5f5f5; color: #0000ff;">else</span> <span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(num1.substring(</span><span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">,</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">) </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;"> ){
                     document.getElementById(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">RESULT</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">).innerText </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">-</span><span style="background-color: #f5f5f5; color: #000000;">"</span> <span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;"> num1.substring(</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">,num1.length);
                 }</span><span style="background-color: #f5f5f5; color: #0000ff;">else</span><span style="background-color: #f5f5f5; color: #000000;">{
                     document.getElementById(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">RESULT</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">).innerText </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">-</span><span style="background-color: #f5f5f5; color: #000000;">"</span> <span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;"> num1;
                 }
                 </span><span style="background-color: #f5f5f5; color: #0000ff;">return</span> <span style="background-color: #f5f5f5; color: #0000ff;">true</span><span style="background-color: #f5f5f5; color: #000000;">;
             }
             </span><span style="background-color: #f5f5f5; color: #0000ff;">return</span> <span style="background-color: #f5f5f5; color: #0000ff;">false</span><span style="background-color: #f5f5f5; color: #000000;">;
        }

        </span><span style="background-color: #f5f5f5; color: #008000;">/*</span><span style="background-color: #f5f5f5; color: #008000;">*
         * 获取4位一小截的数组
         </span><span style="background-color: #f5f5f5; color: #008000;">*/</span>
        <span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;"> getNumArr(num,arr){
            </span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> len </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> num.length;
            </span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(len </span><span style="background-color: #f5f5f5; color: #000000;">&gt;</span> <span style="background-color: #f5f5f5; color: #000000;">4</span><span style="background-color: #f5f5f5; color: #000000;">){
                arr.push(num.substring(len</span><span style="background-color: #f5f5f5; color: #000000;">-</span><span style="background-color: #f5f5f5; color: #000000;">4</span><span style="background-color: #f5f5f5; color: #000000;">,len) </span><span style="background-color: #f5f5f5; color: #000000;">*</span> <span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">);
                num </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> num.substring(</span><span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">,len</span><span style="background-color: #f5f5f5; color: #000000;">-</span><span style="background-color: #f5f5f5; color: #000000;">4</span><span style="background-color: #f5f5f5; color: #000000;">);
                </span><span style="background-color: #f5f5f5; color: #0000ff;">return</span><span style="background-color: #f5f5f5; color: #000000;"> getNumArr(num,arr);
            }</span><span style="background-color: #f5f5f5; color: #0000ff;">else</span><span style="background-color: #f5f5f5; color: #000000;">{
                arr.push(num </span><span style="background-color: #f5f5f5; color: #000000;">*</span> <span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">);
                </span><span style="background-color: #f5f5f5; color: #0000ff;">return</span><span style="background-color: #f5f5f5; color: #000000;"> arr;
            }
        }

        </span><span style="background-color: #f5f5f5; color: #008000;">/*</span><span style="background-color: #f5f5f5; color: #008000;">*
         * 检查输入数字的正确性，非空、无不合法字符
         </span><span style="background-color: #f5f5f5; color: #008000;">*/</span>
        <span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;"> checkNum(num){
             </span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(</span><span style="background-color: #f5f5f5; color: #000000;">!</span><span style="background-color: #f5f5f5; color: #000000;">num){
                 </span><span style="background-color: #f5f5f5; color: #0000ff;">return</span> <span style="background-color: #f5f5f5; color: #0000ff;">false</span><span style="background-color: #f5f5f5; color: #000000;">;
             }
             </span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> str </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> num.replace(</span><span style="background-color: #f5f5f5; color: #000000;">/</span><span style="background-color: #f5f5f5; color: #000000;">[0-9]</span><span style="background-color: #f5f5f5; color: #000000;">/</span><span style="background-color: #f5f5f5; color: #000000;">g,</span><span style="background-color: #f5f5f5; color: #000000;">""</span><span style="background-color: #f5f5f5; color: #000000;">);
             </span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(str </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">""</span> <span style="background-color: #f5f5f5; color: #000000;">||</span><span style="background-color: #f5f5f5; color: #000000;"> (str </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">-</span><span style="background-color: #f5f5f5; color: #000000;">"</span> <span style="background-color: #f5f5f5; color: #000000;">&amp;&amp;</span><span style="background-color: #f5f5f5; color: #000000;"> num.substring(</span><span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">,</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">) </span><span style="background-color: #f5f5f5; color: #000000;">==</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">-</span><span style="background-color: #f5f5f5; color: #000000;">"</span> <span style="background-color: #f5f5f5; color: #000000;">&amp;&amp;</span><span style="background-color: #f5f5f5; color: #000000;"> num.length </span><span style="background-color: #f5f5f5; color: #000000;">&gt;</span> <span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">) 
                 </span><span style="background-color: #f5f5f5; color: #000000;">||</span><span style="background-color: #f5f5f5; color: #000000;"> (str </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;">"</span> <span style="background-color: #f5f5f5; color: #000000;">&amp;&amp;</span><span style="background-color: #f5f5f5; color: #000000;"> num.substring(</span><span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">,</span><span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">) </span><span style="background-color: #f5f5f5; color: #000000;">==</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;">"</span> <span style="background-color: #f5f5f5; color: #000000;">&amp;&amp;</span><span style="background-color: #f5f5f5; color: #000000;"> num.length </span><span style="background-color: #f5f5f5; color: #000000;">&gt;</span> <span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">) ){
                 </span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(num.length </span><span style="background-color: #f5f5f5; color: #000000;">&gt;</span> <span style="background-color: #f5f5f5; color: #000000;">1000</span><span style="background-color: #f5f5f5; color: #000000;">){
                     </span><span style="background-color: #f5f5f5; color: #0000ff;">return</span> <span style="background-color: #f5f5f5; color: #0000ff;">false</span><span style="background-color: #f5f5f5; color: #000000;">;
                 }
                 </span><span style="background-color: #f5f5f5; color: #0000ff;">return</span> <span style="background-color: #f5f5f5; color: #0000ff;">true</span><span style="background-color: #f5f5f5; color: #000000;">;
             }</span><span style="background-color: #f5f5f5; color: #0000ff;">else</span><span style="background-color: #f5f5f5; color: #000000;">{
                 </span><span style="background-color: #f5f5f5; color: #0000ff;">return</span> <span style="background-color: #f5f5f5; color: #0000ff;">false</span><span style="background-color: #f5f5f5; color: #000000;">;
             }
        }
    </span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">
    num1:</span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">input </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">="text"</span><span style="color: #ff0000;"> id</span><span style="color: #0000ff;">="num1"</span><span style="color: #ff0000;"> name</span><span style="color: #0000ff;">=""</span><span style="color: #ff0000;"> <br />　　　　value</span><span style="color: #0000ff;">="7210654754847310623672106547548473106236721065475484731062367210654754847310623672106547548473106236"</span><span style="color: #ff0000;"> style</span><span style="color: #0000ff;">="width:80%"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">br</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">
    num2:</span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">input </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">="text"</span><span style="color: #ff0000;"> id</span><span style="color: #0000ff;">="num2"</span><span style="color: #ff0000;"> name</span><span style="color: #0000ff;">=""</span><span style="color: #ff0000;"> <br />　　　　value</span><span style="color: #0000ff;">="9821610829727513939821610829727513939821610829727513939821610829727513939821610829727513939821610829"</span><span style="color: #ff0000;"> style</span><span style="color: #0000ff;">="width:80%"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">br</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">input </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">="button"</span><span style="color: #ff0000;"> id</span><span style="color: #0000ff;">="num2"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="计算"</span><span style="color: #ff0000;"> onclick</span><span style="color: #0000ff;">="getResult()"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">br</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">textarea </span><span style="color: #ff0000;">id </span><span style="color: #0000ff;">= "RESULT"</span><span style="color: #ff0000;"> rows</span><span style="color: #0000ff;">="5"</span><span style="color: #ff0000;"> style</span><span style="color: #0000ff;">="width:80%"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">textarea</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">&nbsp;</span></pre>
</div>]]></description></item><item><title>软件设计师备考笔记</title><link>http://www.cnblogs.com/ttjsndx/archive/2018/02/26/8466860.html</link><dc:creator>有营养的yyl</dc:creator><author>有营养的yyl</author><pubDate>Mon, 26 Feb 2018 05:44:00 GMT</pubDate><guid>http://www.cnblogs.com/ttjsndx/archive/2018/02/26/8466860.html</guid><description><![CDATA[<p>　　最近在整理以前的考试的笔记，本来准备再手抄一遍，但是发现每次手写总是刚开始写的认真，写到后面字迹就很潦草了，所以决定写到博客中来。一方面便于保存和整理，另一方面也可以给参加软件设计师考试的朋友一个参考。</p>
<p>　　我是17年上半年过的软考，早上58下午54。给大家的复习建议是：</p>
<p>　　　　一：两个月时间刷 【软件设计师考试冲刺（习题与解答）】（..我不是卖书的，不贴链接）</p>
<p>　　　　二：一个月时间刷历年真题卷，按久远的年代到最新的年份的顺序写。</p>
<p>　　　　三：不要去看【软件设计师教程】！软件设计师考试的难度并不高，单纯为了考试的话不需要看完那本厚的教程</p>
<p>　　　　四：对C,C++/JAVA编程熟悉的朋友多把时间花在上午的选择题上，8比2甚至9比1都行。下午的大题题型除了编程以外并不会有太大的改变，可以很快速的掌握。</p>
<hr />
<p>　　<strong><span style="font-size: 16px;">各类资源</span></strong></p>
<p>　　<span style="color: #000000;">&nbsp;</span><a href="https://github.com/ttjsndx/1-10000/raw/master/articles/2017%E4%B8%8A%E5%8D%8A%E5%B9%B4%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E8%80%83%E8%AF%95%E8%80%83%E7%82%B9.docx">2017上半年软件设计师考试考点.docx</a>&nbsp; &nbsp;（<span>17年上半年考试中我能记住的考点 ）</span></p>
<p><span>　　<span><a href="https://github.com/ttjsndx/1-10000/raw/master/articles/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%AC%94%E8%AE%B0.docx">软件设计师备考笔记.docx</a>&nbsp; （很厚的一个本子，慢慢更新中）</span></span></p>
<p><span>　　笔记已更新章节：</span></p>
<p><span>　　</span><strong>一：数据结构与算法基础部分</strong></p>
<p><strong>　　</strong><strong>二：</strong><strong>程序语言与语言处理程序</strong></p>
<p><strong>　　</strong><strong>三：操作系统</strong></p>
<p><strong>　　四：软件工程</strong></p>
<p><strong>　　</strong><strong>五：</strong><strong>面向对象方法</strong></p>
<p><strong>　　六：计算机硬件基础</strong></p>
<p><strong>　　七：数据库基础</strong></p>]]></description></item><item><title>html实现滚动播报（原生JS实现）</title><link>http://www.cnblogs.com/ttjsndx/archive/2018/01/28/8360447.html</link><dc:creator>有营养的yyl</dc:creator><author>有营养的yyl</author><pubDate>Sun, 28 Jan 2018 08:04:00 GMT</pubDate><guid>http://www.cnblogs.com/ttjsndx/archive/2018/01/28/8360447.html</guid><description><![CDATA[<p><span style="font-size: 18px;"><a style="cursor: pointer; text-decoration: none;" href="#"><span style="color: #008080;">html实现滚动播报（原生JS实现）</span></a></span></p>
<p><span style="color: #008080;"><span style="font-size: 18px;"><span style="font-size: 14px; color: #000000;">　　废话不多说，先看一个简单的滚动效果（鼠标放上去的时候可以暂停滚动，谷歌版本 66.0.3359.139（正式版本）查看时会出现滚动混乱。单独提出来的时候不会，应该是谷歌和博客园的某些不兼容优化造成的）：</span></span></span></p>
<div id="bobaodiv" style="overflow: hidden; height: 100px; width: 160px; border: 4px solid blue;" onmouseover="BBScrollAmount=0" onmouseout="BBScrollAmount=2">
<div style="border: 1px solid black; height: 24px; text-align: center;">第一个子DIV</div>
<div style="border: 1px solid black; height: 24px; text-align: center;">第二个子DIV</div>
<div style="border: 1px solid black; height: 24px; text-align: center;">第三个子DIV</div>
<div style="border: 1px solid black; height: 24px; text-align: center;">第四个子DIV</div>
<div style="text-align: center; border: 1px solid black; height: 24px;">第五个子DIV</div>
<div style="text-align: center; border: 1px solid black; height: 24px;">第六个子DIV</div>
<div style="text-align: center; border: 1px solid black; height: 24px;">第一个子DIV</div>
<div style="text-align: center; border: 1px solid black; height: 24px;">第二个子DIV</div>
<div style="text-align: center; border: 1px solid black; height: 24px;">第三个子DIV</div>
<div style="text-align: center; border: 1px solid black; height: 24px;">第四个子DIV</div>
</div>
<p>&nbsp;　　代码如下：</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">&lt;!</span><span style="color: #ff00ff;">DOCTYPE html</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">="text/javascript"</span><span style="color: #0000ff;">&gt;</span>
        <span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> oMarquee; </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">播报的容器</span>
        <span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> BBLineH </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #000000;">26</span><span style="background-color: #f5f5f5; color: #000000;">; </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">单行高度，像素</span>
        <span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> BBScrollAmount </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #000000;">1</span><span style="background-color: #f5f5f5; color: #000000;">; </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">每次滚动高度，像素<br /></span>
        <span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> BBLineCount </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #000000;">6</span><span style="background-color: #f5f5f5; color: #000000;">; </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">当前这批数据 实际行数 </span>
        <span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> rollRestTime </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #000000;">2500</span><span style="background-color: #f5f5f5; color: #000000;">; </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">一条新播报滚动完成后，距离下一次滚动的间隔时间 单位ms</span>
        <span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> rollTime </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #000000;">10</span><span style="background-color: #f5f5f5; color: #000000;">; </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">播报滚动中的刷新时间 单位ms</span>

        <span style="background-color: #f5f5f5; color: #008000;">/*</span><span style="background-color: #f5f5f5; color: #008000;">
         * 启动播报滚动事件
         </span><span style="background-color: #f5f5f5; color: #008000;">*/</span><span style="background-color: #f5f5f5; color: #000000;">
        window.onload</span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;">(){
            BBAllTime </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">;
            oMarquee </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> document.getElementById(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">bobaodiv</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">); </span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">滚动对象 </span>
<span style="background-color: #f5f5f5; color: #000000;">            window.setTimeout( </span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">run()</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">, rollRestTime );
        }

        </span><span style="background-color: #f5f5f5; color: #008000;">/*</span><span style="background-color: #f5f5f5; color: #008000;">
         * 播报滚动事件主逻辑
         </span><span style="background-color: #f5f5f5; color: #008000;">*/</span>
        <span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;"> run() {
            </span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(BBScrollAmount </span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">){</span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">若单次滚动的距离为0，则开始下一次监听，不计数</span>
<span style="background-color: #f5f5f5; color: #000000;">                window.setTimeout( </span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">run()</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">, rollTime );
                </span><span style="background-color: #f5f5f5; color: #0000ff;">return</span><span style="background-color: #f5f5f5; color: #000000;">;
            }
            </span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;"> ( oMarquee.scrollTop &gt;</span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> BBLineCount </span><span style="background-color: #f5f5f5; color: #000000;">*</span><span style="background-color: #f5f5f5; color: #000000;"> BBLineH ) {</span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">滚动完一次数据后，复位</span>
<span style="background-color: #f5f5f5; color: #000000;">                oMarquee.scrollTop </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #000000;">0</span><span style="background-color: #f5f5f5; color: #000000;">;
            }
            oMarquee.scrollTop </span><span style="background-color: #f5f5f5; color: #000000;">+=</span><span style="background-color: #f5f5f5; color: #000000;"> BBScrollAmount;
            </span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;"> ( oMarquee.scrollTop % BBLineH &lt; 1 &amp;&amp; oMarquee.scrollTop &gt; 0</span><span style="background-color: #f5f5f5; color: #000000;"> ) {
                window.setTimeout( </span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">run()</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">, rollRestTime );
            } </span><span style="background-color: #f5f5f5; color: #0000ff;">else</span><span style="background-color: #f5f5f5; color: #000000;"> {
                window.setTimeout( </span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">run()</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">, rollTime );
            }
        }
    </span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">body </span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="bobaodiv"</span><span style="color: #ff0000;"> style</span><span style="color: #0000ff;">="overflow: hidden; height: 100px; width: 160px; border: 4px solid blue;"</span><span style="color: #ff0000;"> onmouseover</span><span style="color: #0000ff;">="BBScrollAmount=0"</span><span style="color: #ff0000;"> onmouseout</span><span style="color: #0000ff;">="BBScrollAmount=1"</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">style</span><span style="color: #0000ff;">="border: 1px solid black; height: 24px; text-align: center;"</span><span style="color: #0000ff;">&gt;</span>第一个子DIV<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">style</span><span style="color: #0000ff;">="border: 1px solid black; height: 24px; text-align: center;"</span><span style="color: #0000ff;">&gt;</span>第二个子DIV<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">style</span><span style="color: #0000ff;">="border: 1px solid black; height: 24px; text-align: center;"</span><span style="color: #0000ff;">&gt;</span>第三个子DIV<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">style</span><span style="color: #0000ff;">="border: 1px solid black; height: 24px; text-align: center;"</span><span style="color: #0000ff;">&gt;</span>第四个子DIV<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">style</span><span style="color: #0000ff;">="text-align: center; border: 1px solid black; height: 24px;"</span><span style="color: #0000ff;">&gt;</span>第五个子DIV<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">style</span><span style="color: #0000ff;">="text-align: center; border: 1px solid black; height: 24px;"</span><span style="color: #0000ff;">&gt;</span>第六个子DIV<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">style</span><span style="color: #0000ff;">="text-align: center; border: 1px solid black; height: 24px;"</span><span style="color: #0000ff;">&gt;</span>第一个子DIV<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">style</span><span style="color: #0000ff;">="text-align: center; border: 1px solid black; height: 24px;"</span><span style="color: #0000ff;">&gt;</span>第二个子DIV<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">style</span><span style="color: #0000ff;">="text-align: center; border: 1px solid black; height: 24px;"</span><span style="color: #0000ff;">&gt;</span>第三个子DIV<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">style</span><span style="color: #0000ff;">="text-align: center; border: 1px solid black; height: 24px;"</span><span style="color: #0000ff;">&gt;</span>第四个子DIV<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
　　<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>&nbsp;　　接下来文章会分两个阶段来详细介绍滚动播报。第一阶段介绍简单的实现方式，可以帮助大家了解滚动实现的基本原理，第二阶段提供了适用性高的demo及api讲解，可以直接引入项目。</p>
<hr />
<p><span style="color: #00ccff; font-size: 18px;">第一阶段</span></p>
<p>　　<span style="color: #00ccff;">一</span><span style="color: #00ccff;">.js属性介绍</span></p>
<table>
<thead>
<tr class="header"><th align="left">编号</th><th align="left">属性名</th><th align="left">备注</th></tr>
</thead>
<tbody>
<tr class="odd">
<td align="center">1</td>
<td align="left"><span>oMarquee</span></td>
<td align="left">播报展示的容器dom</td>
</tr>
<tr class="even">
<td align="center">2</td>
<td align="left"><span>BBLineH</span></td>
<td align="left">播报中每行的高度，必须精确，因为每滚动完一条数据时，需要停留一段时间，再进行下一次滚动</td>
</tr>
<tr class="odd">
<td align="center">3</td>
<td align="left"><span>BBScrollAmount</span></td>
<td align="left">每次页面刷新，滚动的距离</td>
</tr>
<tr class="odd">
<td align="center">4</td>
<td align="left"><span>BBLineCount</span></td>
<td align="left">当前一共有多少条有效数据，用于判断什么时候可以让滚动位置归零</td>
</tr>
<tr class="even">
<td align="center">5</td>
<td align="left"><span>rollRestTime</span></td>
<td align="left">一条数据滚动完以后，停留的时间</td>
</tr>
<tr class="odd">
<td align="center">6</td>
<td align="left"><span>rollTime</span></td>
<td align="left">滚动时刷新页面的间隔时间</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>　　滚动的动作是由<span><span style="color: #3366ff;">scrollTop<span style="color: #000000;">属性实现的</span></span>。该属性可以设置标签内部的 子标签头部 被隐藏的高度，进而实现上下滚动的效果。当然也可以使用<span style="color: #3366ff;">scrollLeft</span>实现左右滚动。</span></p>
<p><span>　　<span style="color: #00ccff;">二.js方法介绍</span></span></p>
<p><span>　　滚动的操作是由一个定时的递归函数实现的。该函数通过【rollTime】 属性来判断在滚动期间，多久刷新一次滚动窗口，通过【BBScrollAmount】属性来判断在滚动期间，每次刷新窗口滚动的距离。通过【BBLineH】属性来判断什么时候完成一行数据的滚动。通过【rollRestTime】属性来判断完成一行数据的滚动后，需要休息多久再进行下一行的滚动。最后还需要【BBLineCount】属性，用来判断什么时候对滚动位置进行归零，实现首尾循环连续滚动的效果。</span></p>
<p><span>　　<span style="color: #00ccff;">三</span><span style="color: #00ccff;">.html介绍</span></span></p>
<p><span><span style="color: #00ccff;">　　<span style="color: #000000;">html中主要有两点需要注意的。1：展示的内容，需要在尾部加上几行首部的内容，因为js需要将最后一行数据滚动到隐藏后，才会进行滚动位置归零。而如果滚动内容只记载到最后一行数据的话，根据scrollTop的特性，就永远也隐藏不了最后一行内容了，进而就会不能归零，滚动停止。2：&nbsp;<span class="cnblogs_code">onmouseover="BBScrollAmount=0" onmouseout="BBScrollAmount=1</span>&nbsp; 可以控制当鼠标移动到滚动窗口时，滚动停止的效果。</span></span></span></p>
<p><span style="color: #00ccff; font-size: 16px;">第二阶段</span></p>
<p><span style="color: #00ccff; font-size: 16px;">　　<span style="color: #000000;">先贴个demo，打个游戏，30号再更。<a href="https://github.com/ttjsndx/someDemo/blob/master/scollDemo.html" target="_blank">demo下载</a></span></span></p>
<p><span style="color: #00ccff; font-size: 16px;"><span style="color: #000000;">　　</span></span></p>]]></description></item><item><title>移动端H5页面惯性滑动监听</title><link>http://www.cnblogs.com/ttjsndx/archive/2018/01/09/8251593.html</link><dc:creator>有营养的yyl</dc:creator><author>有营养的yyl</author><pubDate>Tue, 09 Jan 2018 12:27:00 GMT</pubDate><guid>http://www.cnblogs.com/ttjsndx/archive/2018/01/09/8251593.html</guid><description><![CDATA[<p><span style="color: #008080; font-size: 18px;"><a style="cursor: pointer; text-decoration: none;" href="http://www.cnblogs.com/ttjsndx/p/8251593.html%20" target="_top">移动端H5页面惯性滑动监听</a></span></p>
<p>　　在移动端，当你快速滑动有滚动条的页面时，在你手指离开屏幕时，滚动并不会立即停止，而是会随着&ldquo;惯性&rdquo;继续滑动一段距离。</p>
<p>　　在做项目的过程中，需要监听惯性滑动整个过程。在网上并没有找到相应的监听事件，于是就自己写了一个监听方法。</p>
<p>　　<span>惯性滚动开始时调用的方法是<span>listenSlidingA</span>，结束时调用的方法是listenSlidingEndA。</span></p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;!</span><span style="color: #ff00ff;">DOCTYPE html</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 3</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 4</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;</span>滚动监听<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">style </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">="text/css"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;"> 6</span> <span style="background-color: #f5f5f5; color: #800000;">        .scoll-x-window</span><span style="background-color: #f5f5f5; color: #000000;">{</span>
<span style="color: #008080;"> 7</span> <span style="background-color: #f5f5f5; color: #ff0000;">            height</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 900px</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;"> 8</span> <span style="background-color: #f5f5f5; color: #ff0000;">            width</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 600px</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;"> 9</span> <span style="background-color: #f5f5f5; color: #ff0000;">            overflow-x</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">auto</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">10</span> <span style="background-color: #f5f5f5; color: #ff0000;">            overflow-y</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">hidden</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">11</span> <span style="background-color: #f5f5f5; color: #ff0000;">            border</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">1px solid black</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">12</span>         <span style="background-color: #f5f5f5; color: #000000;">}</span>
<span style="color: #008080;">13</span> <span style="background-color: #f5f5f5; color: #800000;">        .scoll-x-base</span><span style="background-color: #f5f5f5; color: #000000;">{</span>
<span style="color: #008080;">14</span> <span style="background-color: #f5f5f5; color: #ff0000;">            position</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">relative</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">15</span> <span style="background-color: #f5f5f5; color: #ff0000;">            height</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">96%</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">16</span> <span style="background-color: #f5f5f5; color: #ff0000;">            top</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">2%</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">17</span> <span style="background-color: #f5f5f5; color: #ff0000;">            width</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">4800px</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">18</span> <span style="background-color: #f5f5f5; color: #ff0000;">            overflow-x</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">hidden</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">19</span> <span style="background-color: #f5f5f5; color: #ff0000;">            overflow-y</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">auto</span><span style="background-color: #f5f5f5; color: #000000;">;</span> 
<span style="color: #008080;">20</span>         <span style="background-color: #f5f5f5; color: #000000;">}</span>
<span style="color: #008080;">21</span> <span style="background-color: #f5f5f5; color: #800000;">        .scoll-x-panl</span><span style="background-color: #f5f5f5; color: #000000;">{</span>
<span style="color: #008080;">22</span> <span style="background-color: #f5f5f5; color: #ff0000;">            position</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;">relative</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">23</span> <span style="background-color: #f5f5f5; color: #ff0000;">            width</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 590px</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">24</span> <span style="background-color: #f5f5f5; color: #ff0000;">            margin-right</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 10px</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">25</span> <span style="background-color: #f5f5f5; color: #ff0000;">            height</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> 100%</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">26</span> <span style="background-color: #f5f5f5; color: #ff0000;">            float</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> left</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">27</span> <span style="background-color: #f5f5f5; color: #ff0000;">            background-color</span><span style="background-color: #f5f5f5; color: #000000;">:</span><span style="background-color: #f5f5f5; color: #0000ff;"> orange</span><span style="background-color: #f5f5f5; color: #000000;">;</span>
<span style="color: #008080;">28</span>         <span style="background-color: #f5f5f5; color: #000000;">}</span>
<span style="color: #008080;">29</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">style</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">30</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script </span><span style="color: #ff0000;">src</span><span style="color: #0000ff;">="https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">31</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">="text/javascript"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">32</span>         <span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> pageInfo </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;">{};</span><span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">页面数据记录</span>
<span style="color: #008080;">33</span> <span style="background-color: #f5f5f5; color: #000000;">        $(document).on(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">touchend</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">,</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">.scoll-x-panl</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">,listenSlidingA);
</span><span style="color: #008080;">34</span> 
<span style="color: #008080;">35</span>         <span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;"> listenSlidingA(){
</span><span style="color: #008080;">36</span> <span style="background-color: #f5f5f5; color: #000000;">            listenSlidingCore(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">SCOLL_X_WINDOW</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">,</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">listenSlidingEndA()</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">);
</span><span style="color: #008080;">37</span> <span style="background-color: #f5f5f5; color: #000000;">        }
</span><span style="color: #008080;">38</span> 
<span style="color: #008080;">39</span>         <span style="background-color: #f5f5f5; color: #008000;">/*</span><span style="background-color: #f5f5f5; color: #008000;">*
</span><span style="color: #008080;">40</span> <span style="background-color: #f5f5f5; color: #008000;">         * 监听滚动核心事件
</span><span style="color: #008080;">41</span> <span style="background-color: #f5f5f5; color: #008000;">         * windowId：滚动的窗口,callBackFun:回调方法
</span><span style="color: #008080;">42</span>          <span style="background-color: #f5f5f5; color: #008000;">*/</span>
<span style="color: #008080;">43</span>         <span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;"> listenSlidingCore(windowId,callBackFun){
</span><span style="color: #008080;">44</span> <span style="background-color: #f5f5f5; color: #000000;">            pageInfo.scollWidth </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> $(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">#</span><span style="background-color: #f5f5f5; color: #000000;">"</span> <span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;"> windowId ).scrollLeft();
</span><span style="color: #008080;">45</span>             <span style="background-color: #f5f5f5; color: #008000;">//</span><span style="background-color: #f5f5f5; color: #008000;">一次滚动只会触发一次位置纠正，所以要覆盖掉上一次延时任务</span>
<span style="color: #008080;">46</span> <span style="background-color: #f5f5f5; color: #000000;">            clearTimeout(pageInfo.timeoutListener);
</span><span style="color: #008080;">47</span> <span style="background-color: #f5f5f5; color: #000000;">            pageInfo.timeoutListener </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> setTimeout(</span><span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;">(){
</span><span style="color: #008080;">48</span>                 <span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">(pageInfo.scollWidth </span><span style="background-color: #f5f5f5; color: #000000;">==</span><span style="background-color: #f5f5f5; color: #000000;"> $(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">#</span><span style="background-color: #f5f5f5; color: #000000;">"</span> <span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;"> windowId ).scrollLeft()){
</span><span style="color: #008080;">49</span>                     <span style="background-color: #f5f5f5; color: #0000ff;">try</span><span style="background-color: #f5f5f5; color: #000000;">{
</span><span style="color: #008080;">50</span> <span style="background-color: #f5f5f5; color: #000000;">                        eval(callBackFun);
</span><span style="color: #008080;">51</span> <span style="background-color: #f5f5f5; color: #000000;">                    }</span><span style="background-color: #f5f5f5; color: #0000ff;">catch</span><span style="background-color: #f5f5f5; color: #000000;">(e){
</span><span style="color: #008080;">52</span> <span style="background-color: #f5f5f5; color: #000000;">                        console.log(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">出错了:</span><span style="background-color: #f5f5f5; color: #000000;">"</span> <span style="background-color: #f5f5f5; color: #000000;">+</span><span style="background-color: #f5f5f5; color: #000000;"> e);
</span><span style="color: #008080;">53</span> <span style="background-color: #f5f5f5; color: #000000;">                    }
</span><span style="color: #008080;">54</span> <span style="background-color: #f5f5f5; color: #000000;">                }</span><span style="background-color: #f5f5f5; color: #0000ff;">else</span><span style="background-color: #f5f5f5; color: #000000;">{
</span><span style="color: #008080;">55</span> <span style="background-color: #f5f5f5; color: #000000;">                    listenSlidingCore(windowId,callBackFun);
</span><span style="color: #008080;">56</span> <span style="background-color: #f5f5f5; color: #000000;">                }
</span><span style="color: #008080;">57</span> <span style="background-color: #f5f5f5; color: #000000;">            }, </span><span style="background-color: #f5f5f5; color: #000000;">100</span><span style="background-color: #f5f5f5; color: #000000;">);
</span><span style="color: #008080;">58</span> <span style="background-color: #f5f5f5; color: #000000;">        }
</span><span style="color: #008080;">59</span> 
<span style="color: #008080;">60</span>         <span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;"> listenSlidingEndA(){
</span><span style="color: #008080;">61</span> <span style="background-color: #f5f5f5; color: #000000;">            console.log(</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">执行到了回调函数：listenSlidingEndA</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">);
</span><span style="color: #008080;">62</span> <span style="background-color: #f5f5f5; color: #000000;">        }
</span><span style="color: #008080;">63</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">64</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">65</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">66</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="scoll-x-window"</span><span style="color: #ff0000;"> id</span><span style="color: #0000ff;">="SCOLL_X_WINDOW"</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">67</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="scoll-x-base"</span>  <span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">68</span>             <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="scoll-x-panl"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">69</span>             <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="scoll-x-panl"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">70</span>             <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="scoll-x-panl"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">71</span>             <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="scoll-x-panl"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">72</span>             <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="scoll-x-panl"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">73</span>             <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="scoll-x-panl"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">74</span>             <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="scoll-x-panl"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">75</span>             <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">="scoll-x-panl"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">76</span>         <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">77</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">78</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #008080;">79</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>　　该方法是实现 面板滚动中的一个步骤，面板滚动的过程是 1：监听面板的滑动（包括惯性滑动）2：滑动停止后修正面板位置，将最近的面板居中3：高亮底部相应的快捷链接。若你有面板滚动中的相关疑问，欢迎留言交流</p>
<hr />
<p>　　转载请注明出处：<a id="Editor_Edit_hlEntryLink" title="view: 移动端H5页面惯性滑动监听" href="http://www.cnblogs.com/ttjsndx/p/8251593.html" target="_blank">http://www.cnblogs.com/ttjsndx/p/8251593.html</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p>&nbsp;</p>]]></description></item><item><title>简单线条、任意填充色的小图标（含自制方法）</title><link>http://www.cnblogs.com/ttjsndx/archive/2018/01/09/8250107.html</link><dc:creator>有营养的yyl</dc:creator><author>有营养的yyl</author><pubDate>Tue, 09 Jan 2018 03:12:00 GMT</pubDate><guid>http://www.cnblogs.com/ttjsndx/archive/2018/01/09/8250107.html</guid><description><![CDATA[<p>　　最近在做H5的开发中，需要用到一些简单的小图标，百度出来的图片，总是或多或少差了一些颜色。于是准备自己制作图片，PS是不会的，学习以及软件安装太费时，于是就准备用常见的软件来试着做一做。</p>
<p>　　在尝试了 windows自带的画图，word,ppt后发现，ppt做图片是真好用（画图功能单一，word缺少坐标），以下是我做的一些小图标</p>
<p>　　　　　　　　　　<img src="http://images2017.cnblogs.com/blog/1291030/201801/1291030-20180109101556816-583663025.png" alt="" /></p>
<p>　　如果你也需要这种简单线条，任意填充色的图片，那么可以接着看看下面的经验分享，你也可以点击这里下载小图标 <a href="https://github.com/ttjsndx/someDemo/raw/master/picture/little_picture/little_picture.rar" target="_blank">小图标下载（github）</a></p>
<hr />
<p>&nbsp;</p>
<p>　　第一步：新建一张PPT，新建一张幻灯片并去掉默认的框</p>
<p>　　第二部：插入-形状</p>
<p>　　　　　　<img src="http://images2017.cnblogs.com/blog/1291030/201801/1291030-20180109104803269-2970855.png" alt="" /></p>
<p>　　第三步：发挥你的想象力，编制任意图形，右键图形，通过【大小和位置】以及【设置形状格式】配合来自定义图片</p>
<p>　　　　　　<img src="http://images2017.cnblogs.com/blog/1291030/201801/1291030-20180109105712957-766065688.png" alt="" /></p>
<p>　　第四步：按住左键把你做好的图片圈起来，右键，选中另存为图片，不设置背景色的话，背景就是透明的，跟直接剪切出来的不透明图片不一样的哦。</p>
<hr />
<p>&nbsp;</p>
<p>以上就是工作中一个小经验的总结，欢迎指正交流，转载请注明出处。<a id="Editor_Edit_hlEntryLink" title="view: 如何自制简单线条、任意填充色的小图标" href="http://www.cnblogs.com/ttjsndx/p/8250107.html" target="_blank">http://www.cnblogs.com/ttjsndx/p/8250107.html</a>&nbsp;</p>]]></description></item><item><title>git和github新手安装使用教程（三步入门）</title><link>http://www.cnblogs.com/ttjsndx/archive/2017/12/04/7943444.html</link><dc:creator>有营养的yyl</dc:creator><author>有营养的yyl</author><pubDate>Mon, 04 Dec 2017 01:26:00 GMT</pubDate><guid>http://www.cnblogs.com/ttjsndx/archive/2017/12/04/7943444.html</guid><description><![CDATA[<p>&nbsp;</p>
<p><span style="font-size: 18px;"><a style="cursor: pointer; text-decoration: none;" href="#"><span style="color: #008080;">git和github新手安装使用教程（三步入门）</span></a></span></p>
<p>　　对于新手来说，每次更换设备时，github的安装和配置都会耗费大量时间。主要原因是每次安装时都只关心了【怎么做】，而忘记了记住【为什么】。本文从操作的原因入手，将github的安装和配置分为了三个步骤，再细分成各个小步骤，方便大家形成形象记忆，早日脱离该教程的帮助。</p>
<hr />
<p>&nbsp;</p>
<p><span style="font-size: 14px;"><span style="color: #008080;"><span style="color: #000000;">使用github只需要简单的三步：</span></span></span></p>
<p><span style="font-size: 14px; color: #000000;"><span>　　一：初始化本地仓库git</span></span></p>
<p><span style="font-size: 14px; color: #000000;"><span>　　二：将自己的电脑与指定github账户关联</span></span></p>
<p><span style="font-size: 14px; color: #000000;"><span>　　三：将自己的仓库与github上的某个项目关联</span></span></p>
<p>&nbsp;</p>
<p><span style="font-size: 14px; color: #0000ff;"><strong>一：初始化本地仓库git</strong></span></p>
<p>　　1.下载一个git吧&nbsp; &nbsp;<a href="https://git-for-windows.github.io/" target="_blank">下载链接</a>&nbsp;，根据提示安装git</p>
<p>　　2.新建一个文件夹repo作为本地仓库，右键，选择Git Init here。<em><span style="color: #0000ff;">注意</span>：有的版本没有git init here ,则选择git bash here ,在打开的页面中输入git init</em></p>
<p><em>　　第</em>一步的结果就是：（1）在安装的时候自动配置了git运行环境。（2）通过git init 在指定文件夹生成了隐藏的 .git 文件夹。用于保存本地仓库版本的相关信息（版本信息，仓库信息，git命令编译规则等）</p>
<p><span style="color: #0000ff;"><strong>二：将自己的电脑与指定github账户关联</strong></span></p>
<p><strong>　　</strong><span style="color: #000000;">1.创建一个github账户吧&nbsp; <a href="https://github.com/" target="_blank">创建地址</a></span></p>
<p>　　2.在本机上设置你的github的邮箱和用户名</p>
<div class="cnblogs_code">
<pre>git config --<span style="color: #0000ff;">global</span> user.name <span style="color: #800000;">"</span><span style="color: #800000;">用户名</span><span style="color: #800000;">"</span><span style="color: #000000;">
git config </span>--<span style="color: #0000ff;">global</span> user.email <span style="color: #800000;">"</span><span style="color: #800000;">邮箱</span><span style="color: #800000;">"</span></pre>
</div>
<p>　　3.生成本机的SSH key</p>
<div class="cnblogs_code">
<pre>ssh-keygen -t rsa -C "邮箱"</pre>
</div>
<p>&nbsp;</p>
<p><span style="color: #000000;">　　根据提示，按三次回车键，最后会生成ssh key值，并告诉你key值存放的文件的位置，找到该文件并复制ssh key</span></p>
<p><span style="color: #000000;">　　4.打开你的github主页。找到Settings,</span></p>
<p><span style="color: #000000;"><img src="https://images2018.cnblogs.com/blog/1291030/201712/1291030-20171203174623694-1361695866.png" alt="" /></span></p>
<p>&nbsp;选择SSH and GPG keys ，再选择new SSH key，title 随意填，key值就是刚刚生成的本机 SSH KEY</p>
<p>&nbsp;<img src="https://images2018.cnblogs.com/blog/1291030/201712/1291030-20171203174806085-452836274.png" alt="" /></p>
<p>　　第二步设置了本地git与github之间通信的密码，github账户只接受合法的SSH KEY 对其下项目进行修改。</p>
<p><span style="color: #888888;"><strong><span style="color: #0000ff;">三：将自己的仓库与github上的某个项目关联</span></strong></span></p>
<p>　　1.打开github主页，选择 new repository,打开新建项目页面。</p>
<p>　　&nbsp;&nbsp; 在新建项目页面，输入项目名称，点击下一步，复制生成项目后的项目SSH</p>
<p>　　2.打开本地仓库的git bash页面。输入</p>
<div class="cnblogs_code">
<pre>git remote add origin <span style="color: #800000;">"</span><span style="color: #800000;">项目SSH</span><span style="color: #800000;">"</span></pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;　　3.先同步github上master分支的代码，再指定上传的默认分支</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">git pull origin master
git push </span>-u origin master</pre>
</div>
<p>&nbsp;</p>
<p>　　第三步设置了本地仓库对应的是github账户上的哪一个项目，并且设置了代码上传的分支。注意github上的项目名称与本地仓库名称同级，也就是说，从github上同步代码时，只会更新项目名称下的各个文件到本地仓库中。</p>
<hr />
<p>&nbsp;以上就是安装配置github的全部过程，以下为github最常用的命令</p>
<table>
<thead>
<tr class="header"><th align="left">编号</th><th align="left">命令</th><th align="left">备注</th></tr>
</thead>
<tbody>
<tr class="odd">
<td align="center">1</td>
<td align="left">git status</td>
<td align="left">查看仓库的改变情况，会有相关的提示操作出现</td>
</tr>
<tr class="even">
<td align="center">2</td>
<td align="left">git add -A</td>
<td align="left">直接添加所有改动的文件</td>
</tr>
<tr class="odd">
<td align="center">3</td>
<td align="left">git commit -m "note"</td>
<td align="left">确认生成本地的版本，note是 版本特点说明</td>
</tr>
<tr class="odd">
<td align="center">4</td>
<td align="left">git push</td>
<td align="left">将改动上传到github，若没有指定分支，则需要使用git push origin master</td>
</tr>
<tr class="even">
<td align="center">5</td>
<td align="left">git log</td>
<td align="left">查看版本更新情况</td>
</tr>
<tr class="odd">
<td align="center">6</td>
<td align="left">git reset -hard x</td>
<td align="left">回退到某个本地版本,x为git log中出现的hash值的前七位</td>
</tr>
<tr class="even">
<td align="center">7</td>
<td align="left">git clean -xf</td>
<td align="left">清除所有的未提交文件</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>先了解配置过程中的三大步骤，再记住各个细分的小步骤，就能尽早的脱离说明文档，熟练的配置和使用github,祝你不再需要这篇文章的帮助！</p>
<p><span style="font-size: 14px;"><span style="color: #008080;"><span style="color: #000000;">　　（转载请注明出处）</span></span></span></p>
<p>&nbsp;</p>]]></description></item></channel></rss>